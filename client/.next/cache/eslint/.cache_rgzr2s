[{"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/Payment/page.tsx":"1","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/about/page.tsx":"2","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/admin/addCC/page.tsx":"3","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/admin/addTheatre/page.tsx":"4","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/analysis/movieDay.tsx":"5","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/analysis/page.tsx":"6","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/artist/[artist_id]/page.tsx":"7","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/artist/all/page.tsx":"8","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/artist/one/page.tsx":"9","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/context/MoviesContext.ts":"10","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/page.tsx":"11","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/sampleData.ts":"12","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/seats/page.tsx":"13","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/ticket/[ticketId]/page.tsx":"14","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/ticket/page.tsx":"15","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/bostore/page.tsx":"16","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/AddressForm.tsx":"17","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/Checkout.tsx":"18","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/PaymentForm.tsx":"19","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/Review.tsx":"20","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/cardForm.tsx":"21","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Ticket/ticketCard.tsx":"22","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/common/InnerPageContainer.tsx":"23","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/home/movieCarousel.tsx":"24","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/home/recommendedMovies.tsx":"25","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/home/theatersNearBy.tsx":"26","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/formComponents/formInput.tsx":"27","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/formComponents/loadingButton.tsx":"28","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/formComponents/spinner.tsx":"29","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/contact/page.tsx":"30","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/LocationSearchInput.tsx":"31","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/discount.tsx":"32","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/footer.tsx":"33","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/layout.tsx":"34","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/listItems.tsx":"35","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/loading/page.tsx":"36","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/navigationBar.tsx":"37","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/form/page.tsx":"38","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/layout.tsx":"39","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/buyTicket/page.tsx":"40","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/checkout/page.tsx":"41","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/edit/page.tsx":"42","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/page.tsx":"43","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/add/page.tsx":"44","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/all/page.tsx":"45","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/page.tsx":"46","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/personal_profile/page.tsx":"47","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/purchases/page.tsx":"48","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/rewards/page.tsx":"49","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/rewards/parallax/page.tsx":"50","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signin/page.tsx":"51","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/AdditionalDetailsForm.tsx":"52","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/AddressForm.tsx":"53","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/PersonalDetailsForm.tsx":"54","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/page.tsx":"55","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup-original/page.tsx":"56","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/styles/theme/index.tsx":"57","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/[theaterId]/addScreen/page.tsx":"58","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/[theaterId]/editScreen/page.tsx":"59","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/[theaterId]/screens/page.tsx":"60","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/page.tsx":"61","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/utils/globalConstantUtil.js":"62","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/Helpers/redisHelper.ts":"63","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/auth-api.ts":"64","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/backend-api.ts":"65","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/helpers.ts":"66","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/protect-page.tsx":"67","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/token.ts":"68","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/types.ts":"69","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/useSession.tsx":"70","/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/validations/user.schema.ts":"71","/Users/sravankumargorati/teamproject-infinite-loop/client/src/middleware.ts":"72","/Users/sravankumargorati/teamproject-infinite-loop/client/src/store/index.ts":"73"},{"size":250,"mtime":1700641397476,"results":"74","hashOfConfig":"75"},{"size":4441,"mtime":1701433139790,"results":"76","hashOfConfig":"75"},{"size":18627,"mtime":1700121553614,"results":"77","hashOfConfig":"75"},{"size":9002,"mtime":1700122094807,"results":"78","hashOfConfig":"75"},{"size":2890,"mtime":1701432381250,"results":"79","hashOfConfig":"75"},{"size":8240,"mtime":1701432381251,"results":"80","hashOfConfig":"75"},{"size":3678,"mtime":1701432381251,"results":"81","hashOfConfig":"75"},{"size":18044,"mtime":1701432381251,"results":"82","hashOfConfig":"75"},{"size":989,"mtime":1700641397477,"results":"83","hashOfConfig":"75"},{"size":258,"mtime":1700984107284,"results":"84","hashOfConfig":"75"},{"size":579,"mtime":1701432381251,"results":"85","hashOfConfig":"75"},{"size":3297,"mtime":1700984107284,"results":"86","hashOfConfig":"75"},{"size":4805,"mtime":1700984107286,"results":"87","hashOfConfig":"75"},{"size":1863,"mtime":1701432381251,"results":"88","hashOfConfig":"75"},{"size":237,"mtime":1701432381252,"results":"89","hashOfConfig":"75"},{"size":3281,"mtime":1701433139790,"results":"90","hashOfConfig":"75"},{"size":4118,"mtime":1700641397478,"results":"91","hashOfConfig":"75"},{"size":5436,"mtime":1700641397478,"results":"92","hashOfConfig":"75"},{"size":8710,"mtime":1700641397479,"results":"93","hashOfConfig":"75"},{"size":3262,"mtime":1700641397480,"results":"94","hashOfConfig":"75"},{"size":7736,"mtime":1700641397481,"results":"95","hashOfConfig":"75"},{"size":3485,"mtime":1701432381252,"results":"96","hashOfConfig":"75"},{"size":509,"mtime":1700027530797,"results":"97","hashOfConfig":"75"},{"size":8701,"mtime":1701482329018,"results":"98","hashOfConfig":"75"},{"size":5099,"mtime":1701482338603,"results":"99","hashOfConfig":"75"},{"size":5663,"mtime":1701432381252,"results":"100","hashOfConfig":"75"},{"size":1032,"mtime":1700021437428,"results":"101","hashOfConfig":"75"},{"size":621,"mtime":1700021437428,"results":"102","hashOfConfig":"75"},{"size":1709,"mtime":1700021437428,"results":"103","hashOfConfig":"75"},{"size":308,"mtime":1700021437429,"results":"104","hashOfConfig":"75"},{"size":1787,"mtime":1701432381252,"results":"105","hashOfConfig":"75"},{"size":3838,"mtime":1701432381252,"results":"106","hashOfConfig":"75"},{"size":1239,"mtime":1700800233268,"results":"107","hashOfConfig":"75"},{"size":7311,"mtime":1701171921796,"results":"108","hashOfConfig":"75"},{"size":2089,"mtime":1700641397482,"results":"109","hashOfConfig":"75"},{"size":541,"mtime":1701293323946,"results":"110","hashOfConfig":"75"},{"size":20863,"mtime":1701482348091,"results":"111","hashOfConfig":"75"},{"size":1925,"mtime":1700100217613,"results":"112","hashOfConfig":"75"},{"size":1257,"mtime":1701293323947,"results":"113","hashOfConfig":"75"},{"size":23822,"mtime":1701432381252,"results":"114","hashOfConfig":"75"},{"size":1795,"mtime":1701171921808,"results":"115","hashOfConfig":"75"},{"size":20809,"mtime":1701481270888,"results":"116","hashOfConfig":"75"},{"size":11442,"mtime":1701482354191,"results":"117","hashOfConfig":"75"},{"size":20174,"mtime":1701481261647,"results":"118","hashOfConfig":"75"},{"size":8428,"mtime":1701482228342,"results":"119","hashOfConfig":"75"},{"size":865,"mtime":1701432381254,"results":"120","hashOfConfig":"75"},{"size":28219,"mtime":1701432381255,"results":"121","hashOfConfig":"75"},{"size":6141,"mtime":1701432381255,"results":"122","hashOfConfig":"75"},{"size":7177,"mtime":1701432381255,"results":"123","hashOfConfig":"75"},{"size":790,"mtime":1701432381255,"results":"124","hashOfConfig":"75"},{"size":5182,"mtime":1701320361173,"results":"125","hashOfConfig":"75"},{"size":7278,"mtime":1701432381255,"results":"126","hashOfConfig":"75"},{"size":7830,"mtime":1701043850293,"results":"127","hashOfConfig":"75"},{"size":7569,"mtime":1701043850293,"results":"128","hashOfConfig":"75"},{"size":6252,"mtime":1701168096902,"results":"129","hashOfConfig":"75"},{"size":5895,"mtime":1701043850293,"results":"130","hashOfConfig":"75"},{"size":1758,"mtime":1701154526069,"results":"131","hashOfConfig":"75"},{"size":13665,"mtime":1701432381260,"results":"132","hashOfConfig":"75"},{"size":13632,"mtime":1701432381260,"results":"133","hashOfConfig":"75"},{"size":16475,"mtime":1701482428648,"results":"134","hashOfConfig":"75"},{"size":26285,"mtime":1701336013599,"results":"135","hashOfConfig":"75"},{"size":201,"mtime":1700021437430,"results":"136","hashOfConfig":"75"},{"size":1160,"mtime":1700984107291,"results":"137","hashOfConfig":"75"},{"size":2202,"mtime":1701463801736,"results":"138","hashOfConfig":"75"},{"size":1656,"mtime":1701432381266,"results":"139","hashOfConfig":"75"},{"size":1894,"mtime":1700021437430,"results":"140","hashOfConfig":"75"},{"size":317,"mtime":1700021437430,"results":"141","hashOfConfig":"75"},{"size":829,"mtime":1700021437430,"results":"142","hashOfConfig":"75"},{"size":755,"mtime":1700027530797,"results":"143","hashOfConfig":"75"},{"size":530,"mtime":1700984107291,"results":"144","hashOfConfig":"75"},{"size":1360,"mtime":1700641397489,"results":"145","hashOfConfig":"75"},{"size":1991,"mtime":1700021437431,"results":"146","hashOfConfig":"75"},{"size":1467,"mtime":1701336013600,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pj7tok",{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","suppressedMessages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321"},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","suppressedMessages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350"},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/Payment/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/about/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/admin/addCC/page.tsx",["387"],[],"\"use client\";\n\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport React, { useState } from \"react\";\n\n// export default function Contact() {\n//     const [formData, setFormData] = useState({\n//         roletype: \"\",\n//         role: \"\",\n//         name: \"\",\n//         image: \"\",\n//     });\n\n//     const roleOptions = [\n//         { value: 'crew', label: 'Crew' },\n//         { value: 'cast', label: 'Cast' },\n//       ];\n\n//     const castOptions = [\n//         { value: 'actor', label: 'Actor' },\n//         { value: 'actress', label: 'Actress' },\n//         { value: 'otherActor', label: 'Other Actor' },\n//       ];\n\n//     const crewOptions = [\n//         { value: 'director', label: 'Director' },\n//         { value: 'producer', label: 'Producer' },\n//         { value: 'musicDirector', label: 'Music Director' },\n//         { value: 'otherCrew', label: 'Other Crew' },\n//       ];\n\n//     const [formSuccess, setFormSuccess] = useState(false)\n//     const [formSuccessMessage, setFormSuccessMessage] = useState(\"\")\n\n//     const handleInput = (e: any) => {\n//         const fieldName = e.target.name;\n//         const fieldValue = e.target.value;\n\n//         setFormData((prevState) => ({\n//             ...prevState,\n//             [fieldName]: fieldValue\n//         }));\n//     }\n\n//     const submitForm = (e: any) => {\n//         // We don't want the page to refresh\n//         e.preventDefault()\n\n//         const formURL = e.target.action\n//         const data = new FormData()\n\n//         // Turn our formData state into data we can use with a form submission\n//         Object.entries(formData).forEach(([key, value]) => {\n//             data.append(key, value);\n//         })\n//         const get_data = getDataFromEndPoint(JSON.stringify(formData), formURL, 'POST');\n//         console.log(get_data);\n//     }\n//     const [isModalOpen, setModalOpen] = useState(false);\n\n//     // Function to toggle modal visibility\n//     const toggleModal = () => {\n//         setModalOpen(!isModalOpen);\n//     };\n//     const closeModal = () => {\n//         setModalOpen(false);\n//     };\n//     return (\n//         <div className=\"relative flex flex-col justify-center overflow-hidden h-screen\">\n//             <div className=\"w-full p-6 mx-auto my-10 rounded-md shadow-md  lg:max-w-2xl\">\n//                 {!isModalOpen && (\n//                     <div className=\"button-container\">\n//                         <button className=\"btn\" onClick={toggleModal}>\n//                             <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"25\" height=\"25\" viewBox=\"0 0 50 50\">\n//                                 <path d=\"M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 24 13 L 24 24 L 13 24 L 13 26 L 24 26 L 24 37 L 26 37 L 26 26 L 37 26 L 37 24 L 26 24 L 26 13 L 24 13 z\"></path>\n//                             </svg>\n//                             Add to Industry\n//                         </button>\n//                     </div>\n\n//                 )}\n//                 {isModalOpen && (\n//                     <dialog id=\"theatreModal\" className=\"modal\" open>\n//                         <div className=\"modal-box\">\n//                             <button style={{ position: 'absolute', top: '0', left: '0' }} className=\"bg-ghost-500 hover:bg-blue-200 text-black font-bold py-2 px-4 rounded\" onClick={closeModal}>\n//                                 <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"20\" height=\"20\" viewBox=\"0 0 50 50\">\n//                                     <path d=\"M 7.71875 6.28125 L 6.28125 7.71875 L 23.5625 25 L 6.28125 42.28125 L 7.71875 43.71875 L 25 26.4375 L 42.28125 43.71875 L 43.71875 42.28125 L 26.4375 25 L 43.71875 7.71875 L 42.28125 6.28125 L 25 23.5625 Z\"></path>\n//                                 </svg>\n//                             </button>\n//                             <h1 className=\"text-xl font-semibold text-center\">Add Theatre</h1>\n//                             {formSuccess ?\n//                                 <div>{formSuccessMessage}</div>\n//                                 :\n//                                 <form onSubmit={submitForm} action='/admin/addtheatre'>\n//                                     <div>\n//                                     <div className=\"text-lg font-semibold mb-2\">\n//                                         <label className=\"block text-gray-700 text-sm font-bold mb-2\">Role Type</label>\n//                                         <select name=\"roletype\" onChange={handleInput} value={formData.roletype} className=\"input input-bordered w-full max-w-xs\">\n//                                         {roleOptions.map((option) => (\n//                                             <option key={option.value} value={option.value}>\n//                                             {option.label}\n//                                             </option>\n//                                         ))}\n//                                         </select>\n//                                     </div>\n\n//                                     <div className=\"text-lg font-semibold mb-2\">\n//                                         <label className=\"block text-gray-700 text-sm font-bold mb-2\">Role</label>\n//                                         <select name=\"role\" onChange={handleInput} value={formData.role} className=\"input input-bordered w-full max-w-xs\">\n//                                             {formData.roletype.toLowerCase() === 'cast'\n//                                                 ? castOptions.map((option) => (\n//                                                     <option key={option.value} value={option.value}>\n//                                                     {option.label}\n//                                                     </option>\n//                                                 ))\n//                                                 : crewOptions.map((option) => (\n//                                                     <option key={option.value} value={option.value}>\n//                                                     {option.label}\n//                                                     </option>\n//                                                 ))}\n//                                         </select>\n//                                     </div>\n//                                     </div>\n//                                     <div className=\"text-lg font-semibold mb-2\">\n//                                         <label className=\"block text-gray-700 text-sm font-bold mb-2\">Artist Image</label>\n//                                         <input type=\"file\" name=\"image\" onChange={handleInput} value={formData.image} className=\"file-input  w-full max-w-xs\" />\n//                                     </div>\n//                                     <div className=\"text-lg font-semibold mb-2\">\n//                                         <label className=\"block text-gray-700 text-sm font-bold mb-2\">Arist Name</label>\n//                                         <input type=\"text\" name=\"name\" onChange={handleInput} value={formData.name} className=\"input input-bordered w-full max-w-xs\" />\n//                                     </div>\n//                                     <div>\n//                                         <button style={{ position: 'absolute', top: '0', right: '0' }} className=\"bg-ghost-500 hover:bg-blue-200 text-black font-bold py-2 px-4 rounded\" type=\"submit\">\n//                                             <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"25\" height=\"25\" viewBox=\"0 0 50 50\">\n//                                                 <path d=\"M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 24 13 L 24 24 L 13 24 L 13 26 L 24 26 L 24 37 L 26 37 L 26 26 L 37 26 L 37 24 L 26 24 L 26 13 L 24 13 z\"></path>\n//                                             </svg>\n//                                         </button>\n//                                     </div>\n//                                 </form>\n//                             }\n//                         </div>\n//                     </dialog>\n//                 )}\n//             </div>\n//         </div >\n//     )\n// }\n\nconst screenData = [\n  {\n    id: 1,\n    name: \"Mahesh babu\",\n    roletype: \"Cast\",\n    role: \"Actor\",\n    imageUrl:\"https://m.media-amazon.com/images/I/51TGhuM+jAL._AC_UF894,1000_QL80_.jpg\", // Dummy image URL for a larger movie poster\n  },\n];\n\nconst ScreenCard = ({ screen }: { screen: any }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <div className=\"flex items-start bg-white rounded-lg shadow-lg overflow-hidden m-4\">\n      <img\n        className=\"w-48 h-auto object-cover flex-none\"\n        src={screen.imageUrl}\n        alt={`Poster of ${screen.name}`}\n      />\n      <div className=\"flex-1 p-4 relative\">\n        <div className=\"font-bold text-xl mb-2\">{screen.name}</div>\n        <p className=\"text-gray-700 text-base\">Name: {screen.name}</p>\n        <p className=\"text-gray-700 text-base\">Role Type: {screen.roletype}</p>\n        <p className=\"text-gray-700 text-base\">Role: {screen.role}</p>\n        {screen.currentMovie && (\n          <div className=\"absolute bottom-0 left-0 right-0 p-4\">\n            <button className=\"w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n              Add member to industry\n            </button>\n          </div>\n        )}\n      </div>\n      {/* {isModalOpen && (\n          // Modal component here\n          // You would create a separate Modal component and include it here\n        )} */}\n    </div>\n  );\n};\n\nconst ScreensPage = () => {\n  const [formData, setFormData] = useState({\n    roletype: \"\",\n    role: \"\",\n    name: \"\"\n    });\n\n  const roleOptions = [\n    { value: \"\", label: \"\" },\n    { value: \"crew\", label: \"Crew\" },\n    { value: \"cast\", label: \"Cast\" },\n  ];\n\n  const castOptions = [\n    { value: \"\", label: \"\" },\n    { value: \"actor\", label: \"Actor\" },\n    { value: \"actress\", label: \"Actress\" },\n    { value: \"otherActor\", label: \"Other Actor\" },\n  ];\n\n  const crewOptions = [\n    { value: \"\", label: \"\" },\n    { value: \"director\", label: \"Director\" },\n    { value: \"producer\", label: \"Producer\" },\n    { value: \"musicDirector\", label: \"Music Director\" },\n    { value: \"otherCrew\", label: \"Other Crew\" },\n  ];\n\n  const [formSuccess, setFormSuccess] = useState(false);\n  const [formSuccessMessage, setFormSuccessMessage] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleInput = (e: any) => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    setFormData((prevState) => ({\n      ...prevState,\n      [fieldName]: fieldValue,\n    }));\n  };\n\n  const handleFileChange = (e: any) => {\n    e.preventDefault();\n    const file = e.target.files[0];\n    setSelectedFile(file);\n  };\n\n  const submitForm = (e: any) => {\n    e.preventDefault();\n    if (selectedFile) {\n      const formURL = e.target.action;\n      const data = new FormData();\n      data.append(\"file\", selectedFile);\n      Object.entries(formData).forEach(([key, value]) => {\n        data.append(key, value);\n      });\n\n      console.log(data);\n      const get_data = getDataFromEndPoint(data, formURL, \"POST\");\n      console.log(get_data);\n    }\n  };\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  // Function to toggle modal visibility\n  const toggleModal = () => {\n    setModalOpen(!isModalOpen);\n  };\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n\n  return (\n    <div>\n      <div className=\"container mx-auto px-4 py-6 max-w-7xl\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <p className=\"text-3xl font-bold text-gray-900\">Movie Industry</p>\n          {!isModalOpen && (\n            <button className=\"btn\" onClick={toggleModal}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 50 50\"\n                width=\"25\"\n                height=\"25\"\n              >\n                <path d=\"M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 24 13 L 24 24 L 13 24 L 13 26 L 24 26 L 24 37 L 26 37 L 26 26 L 37 26 L 37 24 L 26 24 L 26 13 L 24 13 z\"></path>\n              </svg>\n              Add to Industry\n            </button>\n          )}\n        </div>\n        {isModalOpen && (\n          <dialog id=\"theatreModal\" className=\"modal\" open>\n            <div className=\"modal-box\">\n              <button\n                style={{ position: \"absolute\", top: \"0\", left: \"0\" }}\n                className=\"bg-ghost-500 hover:bg-blue-200 text-black font-bold py-2 px-4 rounded\"\n                onClick={closeModal}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  x=\"0px\"\n                  y=\"0px\"\n                  width=\"20\"\n                  height=\"20\"\n                  viewBox=\"0 0 50 50\"\n                >\n                  <path d=\"M 7.71875 6.28125 L 6.28125 7.71875 L 23.5625 25 L 6.28125 42.28125 L 7.71875 43.71875 L 25 26.4375 L 42.28125 43.71875 L 43.71875 42.28125 L 26.4375 25 L 43.71875 7.71875 L 42.28125 6.28125 L 25 23.5625 Z\"></path>\n                </svg>\n              </button>\n              <h1 className=\"text-xl font-semibold text-center\">\n                Add to Industry\n              </h1>\n              {formSuccess ? (\n                <div>{formSuccessMessage}</div>\n              ) : (\n                <form onSubmit={submitForm} encType='multipart/form-data' action=\"/artist/add\" method=\"POST\">\n                  <div>\n                    <div className=\"text-lg font-semibold mb-2\">\n                      <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n                        Role Type\n                      </label>\n                      <select\n                        name=\"roletype\"\n                        onChange={handleInput}\n                        value={formData.roletype}\n                        className=\"input input-bordered w-full max-w-xs\"\n                      >\n                        {roleOptions.map((option) => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div className=\"text-lg font-semibold mb-2\">\n                      <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n                        Role\n                      </label>\n                      <select\n                        name=\"role\"\n                        onChange={handleInput}\n                        value={formData.role}\n                        className=\"input input-bordered w-full max-w-xs\"\n                      >\n                        {formData.roletype.toLowerCase() === \"cast\"\n                          ? castOptions.map((option) => (\n                              <option key={option.value} value={option.value}>\n                                {option.label}\n                              </option>\n                            ))\n                          : crewOptions.map((option) => (\n                              <option key={option.value} value={option.value}>\n                                {option.label}\n                              </option>\n                            ))}\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"text-lg font-semibold mb-2\">\n                    <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n                      Artist Image\n                    </label>\n                    <input\n                      type=\"file\"\n                      name=\"image\"\n                      onChange={handleFileChange}\n                      className=\"file-input  w-full max-w-xs\"\n                    />\n                  </div>\n                  <div className=\"text-lg font-semibold mb-2\">\n                    <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n                      Arist Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      onChange={handleInput}\n                      value={formData.name}\n                      className=\"input input-bordered w-full max-w-xs\"\n                    />\n                  </div>\n                  <div>\n                    <button\n                      style={{ position: \"absolute\", top: \"0\", right: \"0\" }}\n                      className=\"bg-ghost-500 hover:bg-blue-200 text-black font-bold py-2 px-4 rounded\"\n                      type=\"submit\"\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        x=\"0px\"\n                        y=\"0px\"\n                        width=\"25\"\n                        height=\"25\"\n                        viewBox=\"0 0 50 50\"\n                      >\n                        <path d=\"M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 24 13 L 24 24 L 13 24 L 13 26 L 24 26 L 24 37 L 26 37 L 26 26 L 37 26 L 37 24 L 26 24 L 26 13 L 24 13 z\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </form>\n              )}\n            </div>\n          </dialog>\n        )}\n      </div>\n\n      <div className=\"flex flex-wrap justify-center\">\n        {screenData.map((screen) => (\n          <ScreenCard key={screen.id} screen={screen} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ScreensPage;\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/admin/addTheatre/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/analysis/movieDay.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/analysis/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/artist/[artist_id]/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/artist/all/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/artist/one/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/context/MoviesContext.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/sampleData.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/seats/page.tsx",["388"],[],"\"use client\"\nimport Head from 'next/head'\nimport Link from 'next/link';\nimport { useSearchParams } from 'next/navigation'\nimport { useState, useEffect, useContext } from 'react'\n\nimport { Movie, Seats } from '@/src/lib/types'\nimport styles from './Seats.module.scss'\nimport MoviesContext from '../context/MoviesContext';\n\nconst Seats = () => {\n    const { movies } = useContext(MoviesContext);\n    const searchParams = useSearchParams()\n    let selectedSeats: string[] = [];\n    // const { id, seats }: any = router.query\n    const id = \"3\";\n    const seats = false;\n    const movie = movies.find(mov => mov.id === parseInt(id));\n    const [seatDetails, setSeatDetails] = useState<Seats>(movie?.seats || {});\n\n    useEffect(() => {\n        if (!seats) {\n            clearSelectedSeats();\n        }\n    }, [])\n\n    const clearSelectedSeats = () => {\n        let newMovieSeatDetails = { ...seatDetails };\n        for (let key in seatDetails) {\n            seatDetails[key].forEach((seatValue, seatIndex) => {\n                if (seatValue === 2) {\n                    seatDetails[key][seatIndex] = 0;\n                }\n            })\n        }\n        setSeatDetails(newMovieSeatDetails);\n    }\n\n    const onSeatClick = (seatValue: number, rowIndex: number, key: string) => {\n        if (seatDetails) {\n            if (seatValue === 1 || seatValue === 3) {\n                return;\n            } else if (seatValue === 0) {\n                seatDetails[key][rowIndex] = 2;\n            } else {\n                seatDetails[key][rowIndex] = 0;\n            }\n        }\n        setSeatDetails({ ...seatDetails });\n    }\n\n    /**\n     * 0 - Not booked\n     * 1 - Booked\n     * 2 - Selected\n     * 3 - Blocked\n     */\n    const getClassNameForSeats = (seatValue: number) => {\n        let dynamicClass;\n        if (seatValue === 0) {  // Not booked\n            dynamicClass = styles.seatNotBooked;\n        } else if (seatValue === 1) {  // booked\n            dynamicClass = styles.seatBooked;\n        } else if (seatValue === 2) {  // Seat Selected\n            dynamicClass = styles.seatSelected;\n        } else { // Seat Blocked\n            dynamicClass = styles.seatBlocked;\n        }\n        return `${styles.seats} ${dynamicClass}`\n    }\n\n    const RenderSeats = () => {\n        let seatArray = [];\n        for (let key in seatDetails) {\n            let colValue = seatDetails[key].map((seatValue, rowIndex) => (\n                <span key={`${key}.${rowIndex}`} className={styles.seatsHolder}>\n                    {rowIndex === 0 && <span className={styles.colName}>{key}</span>}\n                    <span className={getClassNameForSeats(seatValue)} onClick={() => onSeatClick(seatValue, rowIndex, key)}>\n                        {rowIndex + 1}\n                    </span>\n                    {seatDetails && rowIndex === seatDetails[key].length - 1 && <><br /><br /></>}\n                </span>\n            ))\n            seatArray.push(colValue);\n        }\n        return (\n            <div className={styles.seatsLeafContainer}>{seatArray}</div>\n        )\n    }\n\n    const RenderPaymentButton = () => {\n        selectedSeats = [];\n        for (let key in seatDetails) {\n            seatDetails[key].forEach((seatValue, seatIndex) => {\n                if (seatValue === 2) {\n                    selectedSeats.push(`${key}${seatIndex + 1}`)\n                }\n            })\n        }\n        if (selectedSeats.length) {\n            return (\n                <Link href={{ pathname: '/payment', query: { movieId: movie?.id, seatDetails: JSON.stringify(seatDetails) } }}>\n                    <div className={styles.paymentButtonContainer}>\n                        <button type=\"submit\" className=\"btn btn-block\">\n                            <span>Pay Rs.{selectedSeats.length * (movie?.ticketCost || 0)}</span>\n                        </button>\n                        {/* <Button variant=\"contained\" href=\"#contained-buttons\" className={styles.paymentButton} >\n                            Pay Rs.{selectedSeats.length * (movie?.ticketCost || 0)}\n                        </Button> */}\n                    </div>\n                </Link>\n            )\n        } else {\n            return <></>\n        }\n    }\n\n    if (!movie) return <div>loading...</div>\n    return (\n        <>\n            <Head>\n                <title>Seats</title>\n            </Head>\n            <div className={styles.seatsContainer}>\n                <h1>{movie.name}</h1>\n                {seatDetails && <RenderSeats />}\n                <div className={styles.cont_screen}>\n                    <div className={styles.screen}></div>\n                </div>\n                <RenderPaymentButton />\n            </div>\n        </>\n    );\n}\n\ntype MovieType = {\n    movie: Movie;\n    isLoading: boolean;\n    isError: boolean;\n}\n\nexport default Seats;","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/ticket/[ticketId]/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/book-ticket/ticket/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/bostore/page.tsx",["389","390"],[],"'use client';\nimport { Box, Button, Container, ImageList, ImageListItem, Typography, Card } from '@mui/material';\nimport { useState } from 'react';\n\n\ntype ImageContainerProps = {\n    src: string;\n    onAddToCart: (amount: number) => void; // Assuming 'onAddToCart' is a function that takes a number\n  };\n\n  const ImageContainer = ({ src, onAddToCart }: ImageContainerProps) => {\n    const [count, setCount] = useState(0);\n  \n    const handleIncrement = () => {\n      const newCount = count + 1;\n      setCount(newCount);\n      onAddToCart(1); // Call onAddToCart with the amount being added\n    };\n  \n    const handleDecrement = () => {\n      const newCount = Math.max(count - 1, 0);\n      setCount(newCount);\n      onAddToCart(-1); // Call onAddToCart with the amount being subtracted\n    };\n\n  return (\n    <Card sx={{ width: '40%', marginBottom: 2, textAlign: 'center', marginLeft: 'auto', marginRight: 'auto', boxShadow: 2 }}>\n      <img src={src} style={{ width: '100%', height: 'auto' }} />\n      <Box sx={{ display: 'flex', justifyContent: 'space-around', padding: '8px' }}>\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleIncrement} sx={{ minWidth: '48px', boxShadow: 1 }}>\n          +\n        </Button>\n        <Button variant=\"outlined\" color=\"secondary\" onClick={handleDecrement} disabled={count === 0} sx={{ minWidth: '48px', boxShadow: 1 }}>\n          -\n        </Button>\n      </Box>\n    </Card>\n  );\n};\n\nexport default function HomePage() {\n  const [totalItems, setTotalItems] = useState(0);\n  const itemPrice = 10;\n\n  const handleAddToCart = (change: any) => {\n    setTotalItems(totalItems + change);\n  };\n\n  const formURl=`http://ec2-3-101-12-15.us-west-1.compute.amazonaws.com/api/payment/merchandise/checkout_session/${totalItems}/${itemPrice}`\n\n  const images = ['https://scontent-sjc3-1.xx.fbcdn.net/v/t1.6435-9/46282568_1008297862711032_2827960145911218176_n.jpg?_nc_cat=107&ccb=1-7&_nc_sid=7f8c78&_nc_ohc=EISr4vn0HVIAX9fupq4&_nc_ht=scontent-sjc3-1.xx&oh=00_AfBfOOydZXeKGhcabHrGhyRvyhlpuP3WeaZ0rP0682wBUg&oe=658F2581',\n    'https://pbs.twimg.com/media/FHIo0-XVcAAWmaD.jpg',\n  'https://scontent-sjc3-1.xx.fbcdn.net/v/t1.6435-9/175348669_10159307436625396_1528083320368309883_n.jpg?_nc_cat=106&ccb=1-7&_nc_sid=c2f564&_nc_ohc=F9fsg97iykEAX8qqOmj&_nc_ht=scontent-sjc3-1.xx&oh=00_AfCx9EyWaPIMao5R5YUTRUczsk0yHSNPeWql4Km5JOjgyA&oe=658F2DDB',\n  'https://nomoreworkhorse.files.wordpress.com/2016/07/index1.jpg',\n\n];\n\n  return (\n    <Container maxWidth=\"lg\">\n      \n      <ImageList cols={1}>\n        {images.map((src, index) => (\n          <ImageListItem key={index}>\n            <ImageContainer src={src} onAddToCart={handleAddToCart} />\n          </ImageListItem>\n        ))}\n      </ImageList>\n\n      <Card sx={{ position: 'fixed', top: 80, right: 20, padding: 2, width: 300, boxShadow: 4 }}>\n        <Typography variant=\"h6\" sx={{ marginBottom: 2 }}>Cart</Typography>\n        <Typography sx={{ marginBottom: 2 }}>Total Items: {totalItems}</Typography>\n        <Typography sx={{ marginBottom: 2 }}>Total Amount: ${totalItems * itemPrice}</Typography>\n        <form action={formURl} method=\"GET\">\n          <Button type=\"submit\" variant=\"contained\" color=\"success\" fullWidth>Checkout</Button>\n        </form>\n      </Card>\n    </Container>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/AddressForm.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/Checkout.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/PaymentForm.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/Review.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Card/cardForm.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/Ticket/ticketCard.tsx",["391","392"],[],"'use client';\nimport { Paper, Typography, Box, Button } from '@mui/material';\nimport React, { useRef, useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport { jsPDF } from 'jspdf';\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport ReactToPrint from \"react-to-print\";\ninterface TicketProps {\n    name: string;\n    movieName: string;\n    showTime: string;\n    seatNo: string;\n    theaterName: string;\n    qrLink: string;\n    screenName: string;\n    date: string;\n}\nconst containerStyle = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh', // Full viewport height\n    width: '100vw', // Full viewport width\n};\n\nconst cardStyle = {\n    transform: 'scale(1.25)', // Increase size by 25%\n    // Add other styling for the card here if needed\n};\nconst TicketCard: React.FC<TicketProps> = ({ name, movieName, showTime, seatNo, theaterName, qrLink, screenName, date }) => {\n    const ticketRef = useRef<HTMLDivElement>(null);\n    const [qrCodeLoaded, setQrCodeLoaded] = useState(false);\n\n    const downloadPdf = () => {\n        window.print();\n    };\n\n\n\n    return (\n        <div style={containerStyle}>\n            <div style={cardStyle} ref={ticketRef}>\n                <Paper elevation={3} sx={{\n                    maxWidth: 300, margin: 'auto', padding: 2, backgroundColor: '#80CBC4'\n                }}>\n                    <Typography variant=\"h5\" component=\"h1\" sx={{ color: 'black', textAlign: 'center', marginBottom: 2 }}>\n                        Box Office\n                    </Typography>\n                    <Typography variant=\"h6\" component=\"h2\" sx={{ color: 'black', textAlign: 'center', marginBottom: 2 }}>\n                        Ticket\n                    </Typography>\n                    <Box sx={{ color: 'black', margin: '2px', textAlign: 'center' }}>\n                        <Typography variant=\"body1\">Hi {name},</Typography>\n                        <Typography variant=\"body1\">Your ticket for the</Typography>\n                        <Typography variant=\"body1\">Movie Name : <span style={{ fontWeight: 'bold' }}> {movieName}</span></Typography>\n                        <Typography variant=\"body1\">Screen Name : {screenName}</Typography>\n                        <Typography variant=\"body1\">Date : {date}</Typography>\n                        <Typography variant=\"body1\">Show Time :<span style={{ fontWeight: 'bold' }}> {showTime}</span></Typography>\n                        <Typography variant=\"body1\">SeatNos :<span style={{ fontWeight: 'bold' }}> {seatNo} </span></Typography>\n                        <Typography variant=\"body1\">Theater Name : {theaterName}</Typography>\n                        <Typography variant=\"body1\">scan this QR at the theater to enjoy your show</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: 2, overflow: 'visible' }}>\n                        {/* <QrCode value=\"some_string_value\" size={128} fgColor=\"#000000\" bgColor=\"#ffffff\" /> */}\n                        <img src={qrLink} style={{ width: 128, height: 128, backgroundColor: \"#ffffff\", color: \"#000000\" }} onLoad={() => setQrCodeLoaded(true)} />\n                    </Box>\n                    <Button onClick={downloadPdf} disabled={!qrCodeLoaded} startIcon={<CloudUploadIcon />} sx={{ color: 'white' }} >Download as PDF</Button>\n                </Paper >\n            </div>\n        </div>\n    );\n};\n\nexport default TicketCard;\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/common/InnerPageContainer.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/home/movieCarousel.tsx",["393"],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/home/recommendedMovies.tsx",["394"],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/dashboard/home/theatersNearBy.tsx",["395"],[],"\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport {\n    Box,\n    Card,\n    CardActionArea,\n    CardMedia,\n    CardContent,\n    Typography,\n} from \"@mui/material\";\nimport Container from \"@mui/material/Container\";\nimport { useRouter } from \"next/navigation\";\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport useStore from \"@/src/store\";\n\nconst Theatercard = ({\n    theater,\n    onImageClick,\n}: {\n    theater: any;\n    onImageClick: any;\n}) => {\n    const [isHovered, setIsHovered] = useState(false);\n\n    return (\n        <Card\n            sx={{\n                width: 350, // Set the width to 350 pixels\n                height: 190, // Set the height to 200 pixels\n                m: 1,\n                boxShadow: 3,\n                position: \"relative\",\n                overflow: \"hidden\",\n                \"&:hover\": {\n                    boxShadow: 6,\n                },\n            }}\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            <CardActionArea onClick={() => onImageClick(theater.id)}>\n                <CardMedia\n                    component=\"img\"\n                    width=\"100%\" // Make the image responsive\n                    height=\"100%\" // Make the image responsive\n                    image={theater.image_url}\n                    alt={theater.title}\n                    sx={{\n                        cursor: \"pointer\",\n                        transition: \"transform 0.5s ease\",\n                        transform: isHovered ? \"scale(1.1)\" : \"scale(1)\",\n                    }}\n                />\n                {isHovered ? (\n                    <Box\n                        sx={{\n                            position: \"absolute\",\n                            bottom: 0,\n                            backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n                            color: \"white\",\n                            p: 1,\n                            width: \"100%\",\n                            height: \"100%\",\n                        }}\n                    >\n                        <Typography variant=\"h6\" component=\"div\">\n                            {theater.name}\n                        </Typography>\n                        <Typography variant=\"body2\">{theater.city}</Typography>\n                    </Box>\n                ) : (\n                    <CardContent>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                            {theater.state}\n                        </Typography>\n                    </CardContent>\n                )}\n            </CardActionArea>\n        </Card>\n    );\n};\n\ninterface TheaterNearByProps {\n    location: string;\n}\nconst TheaterNearBy: React.FC<TheaterNearByProps> = ({ location }) => {\n    const router = useRouter();\n    const store: any = useStore();\n    const [theaterNearByData, setTheaterNearByData] = useState([]);\n    const handleCardClick = (theaterId: any) => {\n        router.push(`/theater/${theaterId}/screens`);\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const pincode = store.pincode;\n            const response = await getDataFromEndPoint(\n                \"\",\n                \"theater/getTheatersNearBy/\" + location,\n                \"GET\"\n            );\n            const data = response.theaters;\n            setTheaterNearByData(data);\n        };\n        fetchData();\n    }, [location]);\n\n    const settings = {\n        dots: false,\n        infinite: true,\n        speed: 500,\n        slidesToShow: theaterNearByData.length,\n        slidesToScroll: 1,\n        nextArrow: (\n            <SampleNextArrow\n                className={undefined}\n                style={undefined}\n                onClick={undefined}\n            />\n        ),\n        prevArrow: (\n            <SamplePrevArrow\n                className={undefined}\n                style={undefined}\n                onClick={undefined}\n            />\n        ),\n    };\n\n    return (\n        <Box>\n            {theaterNearByData.length ? (\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                    Theaters Near By\n                </Typography>\n            ) : (\n                \"\"\n            )}\n            <Slider {...settings}>\n                {theaterNearByData.map((movie, index) => (\n                    <Theatercard\n                        key={index}\n                        theater={movie}\n                        onImageClick={handleCardClick}\n                    />\n                ))}\n            </Slider>\n        </Box>\n    );\n};\n\nfunction SampleNextArrow(props: { className: any; style: any; onClick: any }) {\n    const { className, style, onClick } = props;\n    return (\n        <div\n            className={className}\n            style={{\n                ...style,\n                fontSize: \"100px\",\n                color: \"#00378f\",\n                display: \"block\",\n                right: \"20px\",\n                zIndex: 1,\n            }}\n            onClick={onClick}\n        />\n    );\n}\n\nfunction SamplePrevArrow(props: { className: any; style: any; onClick: any }) {\n    const { className, style, onClick } = props;\n    return (\n        <div\n            className={className}\n            style={{\n                ...style,\n                fontSize: \"100px\",\n                color: \"#00378f\",\n                display: \"block\",\n                left: \"2px\",\n                zIndex: 1,\n            }}\n            onClick={onClick}\n        />\n    );\n}\n\nexport default TheaterNearBy;\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/formComponents/formInput.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/formComponents/loadingButton.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/components/formComponents/spinner.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/contact/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/LocationSearchInput.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/discount.tsx",["396"],[],"import React, { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport { Box } from '@mui/system';\nimport { Button, Grid } from '@mui/material';\nimport { Controller, useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as zod from 'zod';\nimport { getDataFromEndPoint } from '@/src/lib/backend-api';\n\nconst discountSchema = zod.object({\n    tuesday: zod.string().min(0, { message: \"Must be between 0 and 100\" }).max(100, { message: \"Must be between 0 and 100\" }),\n    night_time: zod.string().min(0, { message: \"Must be between 0 and 100\" }).max(100, { message: \"Must be between 0 and 100\" })\n});\n\nexport default function Discount({ submitSuccess }: { submitSuccess: any }) {\n\n    const { control, handleSubmit, formState: { errors }, setValue } = useForm({\n        resolver: zodResolver(discountSchema)\n    });\n\n    useEffect(() => {\n        async function fetchDiscountPrices() {\n            try {\n                // const response = await fetch(\"http://localhost:8080/discount/all\");\n                const data = await getDataFromEndPoint(\"\", `discount/all`, \"GET\");\n                // const data = await response.json();\n                setValue(\"tuesday\", data.data.tuesday.toString());\n                setValue(\"night_time\", data.data.night_time.toString());\n            } catch (error) {\n                console.error(\"Failed to fetch\", error);\n            }\n        }\n        fetchDiscountPrices();\n    }, []);\n\n    const getErrorMessage = (error: any) => {\n        return error && typeof error.message === 'string' ? error.message : '';\n    };\n\n    const onSubmit = async (data: any) => {\n        const response = await getDataFromEndPoint(data, 'discount/add', 'POST');\n        submitSuccess(true);\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Controller\n                        name=\"tuesday\"\n                        control={control}\n                        defaultValue={0}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                type=\"number\"\n                                label=\"Tuesday Discounts (%)\"\n                                error={Boolean(errors.tuesday)}\n                                helperText={getErrorMessage(errors.tuesday)}\n                                InputProps={{ inputProps: { min: 0, max: 100 } }}\n                                fullWidth\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Controller\n                        name=\"night_time\"\n                        control={control}\n                        defaultValue={0}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                type=\"number\"\n                                label=\"Daily Discounts (%)\"\n                                error={Boolean(errors.night_time)}\n                                helperText={getErrorMessage(errors.night_time)}\n                                InputProps={{ inputProps: { min: 0, max: 100 } }}\n                                fullWidth\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                        Submit\n                    </Button>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/footer.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/layout.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/listItems.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/loading/page.tsx",["397"],[],"import React from 'react';\n\nconst LoadingAnimation = () => {\n  const loadingImageUrl = 'https://media.giphy.com/media/Ck8tWBj2lCTnUKdwxW/giphy.gif';\n\n  return (\n    <div style={{\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100vh',\n      background: 'linear-gradient(to right, #f8f8f8, #e7e7e7)' // Light grey gradient background\n    }}>\n      <img src={loadingImageUrl} alt=\"Loading...\" style={{ width: '200px', height: '200px' }} />\n    </div>\n  );\n};\n\nexport default LoadingAnimation;\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/containers/dashboard/navigationBar.tsx",["398","399"],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/form/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/layout.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/buyTicket/page.tsx",["400","401","402"],[],"\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useParams, useSearchParams } from \"next/navigation\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as zod from \"zod\";\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Container,\n  CssBaseline,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Modal,\n  Paper,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  TextField,\n  Typography,\n} from \"@mui/material\";\n\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport { Seats } from \"@/src/lib/types\";\nimport styles from \"./Seats.module.scss\";\nimport { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport Dayjs from \"dayjs\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport useStore from '@/src/store';\n\nconst stripePromise = loadStripe(\n  \"pk_test_51OEgQqA475w0fpJudMi36tfpe04jdRxLTraIo1nwDrPcvgdEhXz77lWWfloifqjrI7UsggP5JppqQvU1fg6hZsuB00ibyRUIcB\"\n);\n\nconst schema = zod.object({\n  date: zod\n    .date()\n    .min(new Date(\"1900-01-01\"), \"Date is required\")\n    .or(zod.string().nonempty(\"Date is required\")),\n  theater: zod.string().min(1, \"Theater is required\"),\n  screen: zod.string().min(1, \"Screen is required\"),\n  timing: zod.string().min(1, \"Select at least one timing\"),\n});\n\nconst style = {\n  position: \"absolute\" as \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default function BuyTicket() {\n  const { movieName } = useParams();\n  const searchParams = useSearchParams()\n  const [editable, setEditable] = useState<boolean>(true);\n  const [theaters, setTheaters] = useState<any[]>([]);\n  const [screens, setScreens] = useState<any[]>([]);\n  const [timings, setTimings] = useState<any[]>([]);\n  const [cost, setCost] = useState(0);\n  const [title, setTitle] = useState();\n  const [releaseDate, setReleaseDate] = useState<any>();\n  const [endDate, setEndDate] = useState();\n  const [open, setOpen] = useState(false);\n  const [seatDetails, setSeatDetails] = useState<Seats>({});\n  const [selectedSeats, setSelectedSeats] = useState<string[]>([]);\n  const [orderDetails, setOrderDetails] = useState<any>(null);\n  const [discountRates, setDiscountRates] = useState<any>(null);\n  const [key, setKey] = useState<string>(\"\");\n  const [isPatched, setIsPatched] = useState<boolean>(false);\n  const [rewardsEnabled, setRewardsEnabled] = useState<string>(\"false\")\n  // const checkoutURL = `http://localhost:8080/payment/checkout_sessions/${key}/${rewardsEnabled}`;\n  const checkoutURL = `http://ec2-3-101-12-15.us-west-1.compute.amazonaws.com/api/payment/checkout_sessions/${key}/${rewardsEnabled}`;\n  const [rewards, setRewards] = useState<number>(0);\n  const store: any = useStore();\n  const [bookingError, setBookingError] = useState<string | null>(null);\n\n\n  useEffect(() => {\n    if (!isPatched) {\n      const theaterId = searchParams.get('theater');\n      const screenId = searchParams.get('screen');\n      const timing = searchParams.get('time');\n\n      if (theaterId) {\n        setValue(\"theater\", theaterId);\n        const selectedTheater = theaters.find((theater) => theater.id === theaterId);\n        if (selectedTheater) {\n          setScreens(selectedTheater.screen_details);\n        }\n        if (screenId && screens.length > 0) {\n          setValue(\"screen\", screenId);\n          const selectedScreen = screens.find((screen) => screen.id === screenId);\n          if (selectedScreen) {\n            setTimings(selectedScreen.show_timings);\n          }\n          if (timing) {\n            setValue(\"timing\", timing);\n            setIsPatched(true);\n          }\n        }\n      }\n    }\n  }, [searchParams, theaters, screens]);\n\n  useEffect(() => {\n    clearSelectedSeats();\n    const fetchData = async () => {\n      try {\n        // const response: any = await fetch(\n        //   `http://localhost:8080/theater/getAllTheatersScreens/${movieName}`\n        // );\n        const res: any = await getDataFromEndPoint(\"\", `theater/getAllTheatersScreens/${movieName}`, \"GET\")\n        // const res = await response.json();\n        setTitle(res.data.movieName);\n        setTheaters(res.data.theaters);\n        setEndDate(res.data.endDate);\n        const currentDate = Dayjs(new Date());\n        const openingDate =\n          currentDate > Dayjs(res.data.releaseDate)\n            ? currentDate\n            : Dayjs(res.data.releaseDate);\n        setReleaseDate(openingDate);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const fetchDiscountRates = async () => {\n      try {\n        // const response: any = await fetch(`http://localhost:8080/discount/all`);\n        const res: any = await getDataFromEndPoint(\"\", `discount/all`, \"GET\")\n        // const res = await response.json();\n        setDiscountRates(res.data)\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    const fetchRewardPoint = async () => {\n      try {\n        // const response: any = await fetch(`http://localhost:8080/user/getRewards/${store.user.user_id}`);\n        const res: any = await getDataFromEndPoint(\"\", `user/getRewards/${store.user.user_id}`, \"GET\");\n        // const res = await response.json();\n        setRewards(res.data)\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n    fetchDiscountRates();\n    fetchRewardPoint();\n  }, []);\n\n  //SEATS CODE\n  const clearSelectedSeats = () => {\n    let newMovieSeatDetails = { ...seatDetails };\n    for (let key in seatDetails) {\n      seatDetails[key].forEach((seatValue, seatIndex) => {\n        if (seatValue === 2) {\n          seatDetails[key][seatIndex] = 0;\n        }\n      });\n    }\n    setSeatDetails(newMovieSeatDetails);\n  };\n\n  const changeEditable = () => {\n    setEditable(!editable);\n  };\n\n  async function validateFileds() {\n    trigger();\n    const values = getValues();\n    if (\n      values.date == null ||\n      values.screen == \"\" ||\n      values.theater == \"\" ||\n      values.timing == \"\"\n    ) {\n      return;\n    } else {\n      const data = {\n        theater_id: values.theater,\n        screen_id: values.screen,\n        movie_id: movieName,\n        time: values.timing,\n        value: values.date,\n      };\n      const response = await getDataFromEndPoint(\n        data,\n        \"screen/getScreenLayout\",\n        \"POST\"\n      );\n      setSelectedSeats([]);\n      setSeatDetails({ ...response.data.seatArray });\n      setCost(response.data.cost);\n      changeEditable();\n    }\n  }\n\n  const {\n    getValues,\n    trigger,\n    control,\n    formState: { errors },\n    setValue\n  } = useForm({\n    resolver: zodResolver(schema),\n  });\n\n  const getErrorMessage = (error: any) => {\n    return error && typeof error.message === \"string\" ? error.message : \"\";\n  };\n\n  //SEATS CODE\n  const getSeatWithOffset = (key: any, rowIndex: number, seatValue: number) => {\n    let offset = 0;\n    let returnValue = \"\";\n    seatDetails[key].forEach((value, index) => {\n      if (value === seatValue && index === rowIndex) {\n        returnValue = `${key}${index + 1 - offset}`;\n      } else if (value === 3) {\n        offset++;\n      }\n    });\n    return returnValue;\n  };\n\n  //SEATS CODE\n  const onSeatClick = (seatValue: number, rowIndex: number, key: string) => {\n    if (editable) return;\n    let tempSelectedSeats = selectedSeats;\n    if (seatDetails) {\n      if (seatValue === 1 || seatValue === 3) {\n        return;\n      } else if (seatValue === 0) {\n        if (selectedSeats.length >= 8) return;\n        seatDetails[key][rowIndex] = 2;\n        const seatValue = getSeatWithOffset(key, rowIndex, 2);\n        tempSelectedSeats.push(seatValue);\n      } else {\n        seatDetails[key][rowIndex] = 0;\n        const seatValue = getSeatWithOffset(key, rowIndex, 0);\n        const index = tempSelectedSeats.indexOf(seatValue);\n        if (index > -1) tempSelectedSeats.splice(index, 1);\n      }\n    }\n    setSelectedSeats(tempSelectedSeats);\n    setSeatDetails({ ...seatDetails });\n  };\n\n  //SEATS CODE\n  const getClassNameForSeats = (seatValue: number) => {\n    let dynamicClass;\n    if (editable) {\n      dynamicClass = styles.disableSeat;\n      if (seatValue == 3) {\n        dynamicClass = styles.seatBlocked;\n      }\n      return `${styles.seats} ${dynamicClass}`;\n    }\n    if (seatValue === 0) {\n      // Not booked\n      dynamicClass = styles.seatNotBooked;\n    } else if (seatValue === 1) {\n      // booked\n      dynamicClass = styles.seatBooked;\n    } else if (seatValue === 2) {\n      // Seat Selected\n      dynamicClass = styles.seatSelected;\n    } else {\n      // Seat Blocked\n      dynamicClass = styles.seatBlocked;\n    }\n    return `${styles.seats} ${dynamicClass}`;\n  };\n\n  //SEATS CODE\n  const RenderSeats = () => {\n    let seatArray = [];\n    for (let key in seatDetails) {\n      let index = 0;\n      let colValue = seatDetails[key].map((seatValue, rowIndex) => (\n        <span key={`${key}.${rowIndex}`} className={styles.seatsHolder}>\n          {rowIndex === 0 && <span className={styles.colName}>{key}</span>}\n          {seatValue != 3 ? (\n            <span\n              className={getClassNameForSeats(seatValue)}\n              onClick={() => onSeatClick(seatValue, rowIndex, key)}\n            >\n              {(index = index + 1)}\n            </span>\n          ) : (\n            <span className={getClassNameForSeats(seatValue)}>{1}</span>\n          )}\n          {seatDetails && rowIndex === seatDetails[key].length - 1 && (\n            <>\n              <br />\n              <br />\n            </>\n          )}\n        </span>\n      ));\n      seatArray.push(colValue);\n    }\n    return <div className={styles.seatsLeafContainer}>{seatArray}</div>;\n  };\n\n  const getReqSeatDeatils = () => {\n    let seatArray: any = {};\n    for (let key in seatDetails) {\n      let column = [];\n      for (let i = 0; i < seatDetails[key].length; i++) {\n        if (seatDetails[key][i] === 2) {\n          column.push(1);\n        } else {\n          column.push(seatDetails[key][i]);\n        }\n      }\n      seatArray[key] = column;\n    }\n    return seatArray;\n  };\n\n  async function onSubmit() {\n    let data = getValues();\n    let dayOfWeek = data.date.day();\n    // console.log(dayOfWeek);\n    const timeStamp = data.timing.split(\" \")[1];\n    let time = null;\n    if (timeStamp === \"pm\") {\n      time = data.timing.split(\":\")[0];\n      time = (Number(time) + 12).toString();\n    } else {\n      time = data.timing.split(\":\")[0];\n    }\n    const key = data.theater + \"-\" + data.screen + \"-\" + time + \"-\" + data.date;\n    let discount = dayOfWeek.toString() === \"2\" ? discountRates.tuesday : null;\n    if (time >= 18) discount = discountRates.night_time;\n    const totalPrice = discount != null ? cost * selectedSeats.length * (1 - discount * 0.01) : cost * selectedSeats.length;\n    data[\"user_id\"] = store.user ? store.user.user_id : null;\n    data[\"discount\"] = dayOfWeek.toString() === \"2\" ? \"tuesday\" : ((time >= 18) ? \"night_time\" : null);\n    data[\"screenLayout\"] = getReqSeatDeatils();\n    data[\"seatSelected\"] = selectedSeats;\n    data[\"movie_id\"] = movieName;\n    data[\"key\"] = key;\n    data[\"price\"] = cost;\n    data[\"rewards\"] = rewards;\n    data[\"is_prime\"] = false;\n\n    // Attempt to store ticket booking details\n    const reqData = await getDataFromEndPoint(\n      data,\n      \"payment/storeTicketBookingDetails\",\n      \"POST\"\n    );\n\n    // Check the response status\n    if (reqData.status === 200) {\n      // Construct order details for a successful booking\n      const tempOrderDetails = {\n        ticketsBooked: selectedSeats.join(\",\"),\n        pricePerTicket: cost,\n        discount: dayOfWeek.toString() === \"2\" ? `Tuesday's Discount ${discount}%` : (time >= 18 ? `Night Show Discount ${discount}%` : '0'),\n        totalPrice: totalPrice,\n      };\n      setOrderDetails(tempOrderDetails);\n      setKey(key);\n      setBookingError(null); // Clear any previous errors\n      setOpen(true); // Open the modal for a successful booking\n    } else if (reqData.status === 400) {\n      // Handle the error scenario\n      setBookingError(reqData.message); // Set the error message\n      setOpen(true); // Open the modal to show the error\n    }\n    // You may want to handle other status codes as well\n  }\n\n\n  function theaterChange(event: any) {\n    theaters.forEach((theater) => {\n      if (theater.id == event.target.value) {\n        setValue('screen', null);\n        setValue('timing', null);\n        setScreens(theater.screen_details);\n        setTimings([]);\n      }\n    });\n  }\n\n  function screenChange(event: any) {\n    screens.forEach((screen) => {\n      if (screen.id == event.target.value) {\n        setTimings(screen.show_timings);\n      }\n    });\n  }\n\n  function handleRewards(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.checked) {\n      setRewardsEnabled(\"true\");\n    } else {\n      setRewardsEnabled(\"false\");\n    }\n  }\n\n  const handleCloseModal = () => {\n    setOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container\n        maxWidth={false}\n        style={{ marginLeft: \"0px\", marginRight: \"0px\", marginTop: \"6%\" }}\n      >\n        <form>\n          <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n            <Typography variant=\"h4\">Book Ticket - {title}</Typography>\n          </Box>\n          <Grid container spacing={2}>\n            <Grid\n              sx={{ display: \"flex\", justifyContent: \"center\", mt: \"16px\" }}\n              item\n              xs={12}\n              md={12}\n              lg={3}\n            >\n              <Controller\n                name=\"date\"\n                control={control}\n                defaultValue={null}\n                render={({ field }) => (\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\n                    {!editable ? (\n                      <TextField\n                        {...field}\n                        label=\"SelectDate\"\n                        value={field.value ? Dayjs(field.value).format('MM/DD/YYYY') : ''}\n                        disabled={!editable}\n                        fullWidth\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                          shrink: Boolean(field.value),\n                        }}\n                      />\n                    ) : (\n                      <DatePicker\n                        disabled={!editable}\n                        minDate={Dayjs(releaseDate)}\n                        maxDate={Dayjs(endDate)}\n                        sx={{ width: \"100%\" }}\n                        label=\"Select Date\"\n                        {...field}\n                      />\n                    )\n                    }\n                  </LocalizationProvider>\n                )}\n              />\n            </Grid>\n            <Grid item xs={12} md={12} lg={3}>\n              <Controller\n                name=\"theater\"\n                control={control}\n                defaultValue={null}\n                render={({ field }) => (\n                  <FormControl\n                    disabled={!editable}\n                    fullWidth\n                    margin=\"normal\"\n                    error={!!errors.theater}\n                  >\n                    <InputLabel>Theater</InputLabel>\n                    <Select\n                      {...field}\n                      label=\"Theater\"\n                      onChange={(event) => {\n                        field.onChange(event);\n                        theaterChange(event);\n                      }}\n                      value={field.value || \"\"}\n                    >\n                      {theaters.map((theater) => (\n                        <MenuItem key={theater.id} value={theater.id}>\n                          {theater.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText id=\"component-error-text\">\n                      {getErrorMessage(errors.theater)}\n                    </FormHelperText>\n                  </FormControl>\n                )}\n              />\n            </Grid>\n            <Grid item xs={12} md={12} lg={3}>\n              <Controller\n                name=\"screen\"\n                control={control}\n                defaultValue={null}\n                render={({ field }) => (\n                  <FormControl\n                    disabled={!editable}\n                    fullWidth\n                    margin=\"normal\"\n                    error={!!errors.screen}\n                  >\n                    <InputLabel>Screen</InputLabel>\n                    <Select\n                      {...field}\n                      label=\"Screen\"\n                      onChange={(event) => {\n                        field.onChange(event);\n                        screenChange(event);\n                      }}\n                      value={field.value || \"\"}\n                    >\n                      {screens.map((screen) => (\n                        <MenuItem key={screen.id} value={screen.id}>\n                          {screen.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText id=\"component-error-text\">\n                      {getErrorMessage(errors.screen)}\n                    </FormHelperText>\n                  </FormControl>\n                )}\n              />\n            </Grid>\n            <Grid item xs={12} md={12} lg={3}>\n              <Controller\n                name=\"timing\"\n                control={control}\n                defaultValue=\"\"\n                render={({ field }) => (\n                  <FormControl\n                    disabled={!editable}\n                    fullWidth\n                    margin=\"normal\"\n                    error={!!errors.timing}\n                  >\n                    <InputLabel>Timing</InputLabel>\n                    <Select {...field} label=\"Timing\">\n                      {timings.map((time) => (\n                        <MenuItem key={time} value={time}>\n                          {time}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText id=\"component-error-text\">\n                      {getErrorMessage(errors.timing)}\n                    </FormHelperText>\n                  </FormControl>\n                )}\n              />\n            </Grid>\n          </Grid>\n          <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n            <Grid item xs={12} lg={12}>\n              <Grid container justifyContent=\"center\" spacing={2}>\n                {editable ? (\n                  <Box gap={2} my={4}>\n                    <Button variant=\"contained\" onClick={validateFileds}>\n                      Apply Changes\n                    </Button>\n                  </Box>\n                ) : (\n                  <Box gap={2} my={4}>\n                    <Button\n                      style={{ marginRight: \"5px\" }}\n                      variant=\"outlined\"\n                      onClick={changeEditable}\n                    >\n                      Change Theater\n                    </Button>\n                    {selectedSeats.length !== 0 && (\n                      <Button\n                        variant=\"contained\"\n                        onClick={() => {\n                          onSubmit();\n                        }}\n                      >\n                        Book Ticket Pay ${selectedSeats.length * (cost || 0)}\n                      </Button>\n                    )}\n                  </Box>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n        <>\n          <div className={styles.seatsContainer}>\n            {seatDetails ? (\n              <RenderSeats />\n            ) : (\n              <div> Select Theater and Apply Changes to Select Layout </div>\n            )}\n            <div className={styles.cont_screen}>\n              <div className={styles.screen}>\n                <span className={styles.screen_text}>SCREEN</span>\n              </div>\n            </div>\n          </div>\n        </>\n      </Container>\n      <Modal open={open} onClose={handleCloseModal}>\n        <Box sx={{\n          ...style,\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"600px\",\n          maxWidth: \"1000px\",\n          height: \"400px\",\n        }}>\n          {bookingError && (\n            <>\n              <img\n                src=\"https://img.freepik.com/vektoren-premium/popcorn-cartoon-maskottchen-weinen-mit-einem-taschentuch_193274-2025.jpg?w=2000\"\n                alt=\"Sad popcorn\"\n                style={{ width: '150px', height: 'auto', marginBottom: '16px' }}\n              />\n              <Typography color=\"error\" variant=\"h6\" component=\"h2\" sx={{ mt: 2, mb: 2, fontFamily: '\"Comic Sans MS\", cursive, sans-serif' }}>\n                Oops 😔 {bookingError}\n              </Typography>\n            </>\n          )}\n          {!bookingError && (\n            <form action={checkoutURL} method=\"POST\">\n              <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <Typography variant=\"h6\">{title}</Typography>\n                <FormGroup>\n                  <FormControlLabel control={<Checkbox onChange={handleRewards} />} label={\"Apply Your Rewards: \" + rewards} />\n                </FormGroup>\n              </Box>\n              <TableContainer component={Paper} style={{ boxShadow: \"none\" }}>\n                <Table sx={{ minWidth: 550 }} aria-label=\"simple table\">\n                  <TableBody>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        Tickets Booked\n                      </TableCell>\n                      <TableCell align=\"right\">{orderDetails?.ticketsBooked}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        Cost Per Ticket\n                      </TableCell>\n                      <TableCell align=\"right\">${orderDetails?.pricePerTicket}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        Discount\n                      </TableCell>\n                      <TableCell align=\"right\">{orderDetails?.discount}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">\n                        Tickets Price\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        ${orderDetails?.totalPrice}\n                      </TableCell>\n                    </TableRow>\n                    {rewardsEnabled === \"true\" &&\n                      <TableRow>\n                        <TableCell component=\"th\" scope=\"row\">\n                          Final Price After Rewards\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          ${((orderDetails?.totalPrice - (0.1 * rewards)) > 0) ? (orderDetails?.totalPrice - (0.1 * rewards)) : '0'}\n                        </TableCell>\n                      </TableRow>\n                    }\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <Button\n                type=\"submit\"\n                sx={{ mt: 5 }}\n                variant=\"contained\"\n              >\n                checkout\n              </Button>\n\n            </form>\n          )}\n        </Box>\n      </Modal>\n    </React.Fragment>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/checkout/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/edit/page.tsx",["403","404","405"],[],"\"use client\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Box from \"@mui/material/Box\";\nimport Chip from \"@mui/material/Chip\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport FormControl from \"@mui/material/FormControl\";\nimport { Avatar, Input, Paper, Typography } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport { Theme } from \"@mui/material\";\nimport theme from \"../../../styles/theme\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { useParams, useRouter } from \"next/navigation\";\n\nexport default function EditMovie() {\n  const { movieName }: { movieName: string } = useParams();\n  interface CastMember {\n    id: string;\n    name: string;\n    profile_url: string;\n  }\n\n  interface CrewMember {\n    id: string;\n    name: string;\n    profile_url: string;\n  }\n\n  const [cast, setCast] = useState<CastMember[]>([]);\n  const [crew, setCrew] = useState<CrewMember[]>([]);\n  const [selectedCast, setSelectedCast] = useState<CastMember[]>([]);\n  const [selectedCrew, setSelectedCrew] = useState<CrewMember[]>([]);\n  const [selectedFiles, setSelectedFiles] = useState<File[] | null>(null);\n\n  const [formData, setFormData] = useState({\n    movieName: \"\",\n    AboutTheMovie: \"\",\n    movieTrailerLink: \"\",\n    Runtime: \"\",\n    genre: [] as string[],\n    format: [] as string[],\n    endDate: \"\",\n    releaseDate: \"\",\n    cast: \"\",\n    crew: \"\",\n    certificate: \"\",\n    languages: \"\",\n  });\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        // const response = await fetch(`http://localhost:8080/movie/${movieName}`);\n        const data = await getDataFromEndPoint(\"\", `movie/${movieName}`, \"GET\");\n        // if (!response.ok) {\n        //     throw new Error(`Error: ${response.status}`);\n        // }\n        // const data = await response.json();\n        setFormData(() => ({\n          movieName: data.movie.title,\n          AboutTheMovie: data.movie.description,\n          movieTrailerLink: data.movie.trailer_url,\n          Runtime: data.movie.run_time,\n          genre: data.movie.genres[0].split(\",\"),\n          format: data.movie.format.split(\",\"),\n          endDate: data.movie.end_date.split(\"T\")[0],\n          releaseDate: data.movie.release_date.split(\"T\")[0],\n          cast: \"\",\n          crew: \"\",\n          certificate: data.movie.certificate,\n          languages: data.movie.languages[0],\n        }));\n        setSelectedCast(\n          data.cast.map((castMember: any) => ({\n            id: castMember.id,\n            name: castMember.name,\n            description: castMember.description,\n            profession: castMember.profession,\n            profile_url: castMember.profile_url,\n          }))\n        );\n\n        setSelectedCrew(\n          data.crew.map((crewMember: any) => ({\n            id: crewMember.id,\n            name: crewMember.name,\n            description: crewMember.description,\n            profession: crewMember.profession,\n            profile_url: crewMember.profile_url,\n          }))\n        );\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    };\n\n    const fetchArtsitData = async () => {\n      try {\n        // const response = await fetch(\"http://localhost:8080/artist/all\");\n        const data = await getDataFromEndPoint(\"\", `artist/all`, \"GET\");\n        // if (!response.ok) {\n        //     throw new Error(`Error: ${response.status}`);\n        // }\n        // const data = await response.json();\n        setCrew(data.Crew);\n        setCast(data.Cast);\n        fetchMovie();\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    };\n    fetchArtsitData();\n  }, []);\n\n  const genres = [\n    \"Action\",\n    \"Drama\",\n    \"Comedy\",\n    \"Science Fiction\",\n    \"Horror\",\n    \"Romance\",\n    \"Fantasy\",\n    \"Thriller\",\n    \"Adventure\",\n    \"Mystery\",\n  ];\n  const formats = [\"IMAX 70mm\", \"4DX\", \"3D\", \"SD\"];\n\n  const router = useRouter();\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  function getStyles(\n    name: string,\n    personName: readonly string[],\n    theme: Theme\n  ) {\n    return {\n      fontWeight:\n        personName.indexOf(name) === -1\n          ? theme.typography.fontWeightRegular\n          : theme.typography.fontWeightMedium,\n    };\n  }\n\n  const languageOptions = [\n    \"Select a language\",\n    \"English\",\n    \"Spanish\",\n    \"French\",\n    \"German\",\n    \"Mandarin Chinese\",\n    \"Hindi\",\n    \"Japanese\",\n    \"Korean\",\n    \"Italian\",\n    \"Russian\",\n    \"Portuguese\",\n    \"Arabic\",\n    \"Turkish\",\n    \"Persian\",\n    \"Swedish\",\n    \"Danish\",\n    \"Norwegian\",\n    \"Finnish\",\n    \"Dutch\",\n    \"Greek\",\n    \"Polish\",\n    \"Hungarian\",\n    \"Czech\",\n    \"Thai\",\n    \"Hebrew\",\n    \"Tamil\",\n    \"Telugu\",\n    \"Bengali\",\n  ];\n\n  const handleInput = (e: any) => {\n    console.log(e.target);\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    setFormData((prevState) => ({\n      ...prevState,\n      [fieldName]: fieldValue,\n    }));\n  };\n\n  const handleFileChange = (e: any) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      console.log(files);\n      const selectedFilesArray: File[] = Array.from(files);\n      setSelectedFiles(selectedFilesArray); // Update the state\n    }\n  };\n\n  const handleGenreChange = (event: SelectChangeEvent<string[]>) => {\n    const {\n      target: { value },\n    } = event;\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      genre: value as string[],\n    }));\n  };\n\n  const submitForm = async (e: any) => {\n    e.preventDefault();\n    console.log(formData);\n    const data = new FormData();\n\n    Object.entries(formData).forEach(([key, value]) => {\n      if (key === \"genre\" || key === \"format\") {\n        data.append(key, (value as string[]).join(\", \"));\n      } else {\n        data.append(key, value as string | Blob);\n      }\n    });\n    if (selectedFiles) {\n      selectedFiles.forEach((file, index) => {\n        data.append(`movieposter`, file);\n      });\n    }\n    data.append(\"castIds\", selectedCast.map((artist) => artist.id).join(\",\"));\n    console.log(selectedCrew);\n    data.append(\"crewIds\", selectedCrew.map((artist) => artist.id).join(\",\"));\n    data.append(\"id\", movieName);\n    const formURL = \"movie/updateMovie\";\n    const response = await getDataFromEndPoint(data, formURL, \"POST\");\n    if (response != null) {\n      router.push(\"/movies/all\");\n    }\n  };\n\n  const handleFormatChange = (event: SelectChangeEvent<string[]>) => {\n    const {\n      target: { value },\n    } = event;\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      format: value as string[],\n    }));\n  };\n\n  return (\n    <div\n      style={{\n        display: \"block\",\n        width: \"50%\",\n        margin: \"auto\",\n        paddingTop: \"100px\",\n      }}\n    >\n      <Paper\n        elevation={3}\n        style={{ padding: \"2px\", textAlign: \"center\", marginBottom: \"30px\" }}\n      >\n        <Typography\n          variant=\"h4\"\n          component=\"h1\"\n          style={{\n            fontFamily: \"Arial, sans-serif\",\n            fontSize: \"36px\",\n            fontWeight: \"bold\",\n            color: \"#333\", // Dark gray color\n            textTransform: \"uppercase\",\n            borderBottom: \"2px solid #0073e6\", // Blue underline\n            padding: \"10px 0\",\n            textAlign: \"center\",\n            letterSpacing: \"2px\",\n            textShadow: \"2px 2px 4px rgba(0, 0, 0, 0.2)\", // Subtle shadow\n          }}\n        >\n          Update Movie\n        </Typography>\n      </Paper>\n      <form method=\"POST\" onSubmit={submitForm}>\n        <Box\n          component=\"div\"\n          sx={{\n            backgroundColor: \"white\",\n            padding: \"15px\",\n            borderRadius: \"1px\",\n            boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\", // Box shadow\n          }}\n        >\n          <div style={{ marginBottom: \"12px\" }}>\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr\",\n                gap: \"16px\",\n              }}\n            >\n              <div style={{ display: \"flex\", gap: \"20px\" }}>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"Movie Name\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"movieName\"\n                    placeholder=\"Movie Name\"\n                    onChange={handleInput}\n                    value={formData.movieName}\n                  />\n                </div>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"About the Movie\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"AboutTheMovie\"\n                    placeholder=\"About the Movie\"\n                    onChange={handleInput}\n                    value={formData.AboutTheMovie}\n                  />\n                </div>\n              </div>\n              <div>\n                <InputLabel htmlFor=\"end-date\" shrink>\n                  Movie Poster\n                </InputLabel>\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"movieposter\"\n                  type=\"file\"\n                  onChange={handleFileChange}\n                  inputProps={{ multiple: true }}\n                />\n              </div>\n              <div style={{ display: \"flex\", gap: \"20px\" }}>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"Movie Trailer Link\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"movieTrailerLink\"\n                    onChange={handleInput}\n                    value={formData.movieTrailerLink}\n                  />\n                </div>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"Runtime\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"Runtime\"\n                    placeholder=\"Runtime\"\n                    onChange={handleInput}\n                    value={formData.Runtime}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div\n            style={{ display: \"grid\", gridTemplateColumns: \"1fr\", gap: \"16px\" }}\n          >\n            {/* Genres and Format side by side */}\n            <div style={{ display: \"flex\", gap: \"16px\" }}>\n              {/* Genre Selection */}\n              <div>\n                <FormControl sx={{ m: 1, width: 300 }}>\n                  <InputLabel id=\"demo-multiple-chip-label\">\n                    Select Genres\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-multiple-chip-label\"\n                    id=\"demo-multiple-chip\"\n                    multiple\n                    value={formData.genre}\n                    onChange={handleGenreChange}\n                    input={\n                      <OutlinedInput\n                        id=\"select-multiple-chip\"\n                        label=\"Select Genres\"\n                      />\n                    }\n                    renderValue={(selected) => (\n                      <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\n                        {selected.map((value) => (\n                          <Chip key={value} label={value} />\n                        ))}\n                      </Box>\n                    )}\n                    MenuProps={MenuProps}\n                  >\n                    {genres.map((genre, index) => (\n                      <MenuItem\n                        key={genre}\n                        value={genre}\n                        style={getStyles(genre, formData.genre, theme)}\n                      >\n                        {genre}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n\n              {/* Format Selection */}\n              <div>\n                <FormControl sx={{ m: 1, width: 300 }}>\n                  <InputLabel id=\"format-multiple-chip-label\">\n                    Select Format\n                  </InputLabel>\n                  <Select\n                    labelId=\"format-multiple-chip-label\"\n                    id=\"format-multiple-chip\"\n                    multiple\n                    value={formData.format}\n                    onChange={handleFormatChange}\n                    input={\n                      <OutlinedInput\n                        id=\"select-multiple-chip-format\"\n                        label=\"Select Format\"\n                      />\n                    }\n                    renderValue={(selected) => (\n                      <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\n                        {selected.map((value) => (\n                          <Chip key={value} label={value} />\n                        ))}\n                      </Box>\n                    )}\n                    MenuProps={MenuProps}\n                  >\n                    {formats.map((format) => (\n                      <MenuItem\n                        key={format}\n                        value={format}\n                        style={getStyles(format, formData.format, theme)}\n                      >\n                        {format}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n            </div>\n\n            {/* End Date and Release Date side by side */}\n            <div style={{ display: \"flex\", gap: \"16px\" }}>\n              {/* Date Pickers */}\n\n              <div>\n                <FormControl fullWidth variant=\"outlined\">\n                  <InputLabel htmlFor=\"Release-date\" shrink>\n                    Release Date\n                  </InputLabel>\n                  <Input\n                    id=\"Release-date\"\n                    type=\"date\"\n                    name=\"releaseDate\"\n                    value={formData.releaseDate}\n                    onChange={handleInput}\n                  />\n                </FormControl>\n              </div>\n              <div>\n                <FormControl fullWidth variant=\"outlined\">\n                  <InputLabel htmlFor=\"end-date\" shrink>\n                    End Date\n                  </InputLabel>\n                  <Input\n                    id=\"end-date\"\n                    type=\"date\"\n                    name=\"endDate\"\n                    value={formData.endDate}\n                    onChange={handleInput}\n                  />\n                </FormControl>\n              </div>\n            </div>\n            <div>\n              <Autocomplete\n                multiple\n                id=\"tags-outlined\"\n                options={cast}\n                getOptionLabel={(option) => option.name || \"\"}\n                value={selectedCast}\n                onChange={(event, newValue) => {\n                  setSelectedCast(newValue);\n                }}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <Avatar\n                      key={option.name}\n                      src={option.profile_url}\n                      alt={option.name}\n                      sx={{\n                        width: 30,\n                        height: 30,\n                        marginRight: 1,\n                      }}\n                    />\n                    {option.name}\n                  </Box>\n                )}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Box\n                      {...getTagProps({ index })}\n                      component=\"div\"\n                      sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}\n                      key={index}\n                    >\n                      <img\n                        src={option.profile_url}\n                        alt={option.name}\n                        style={{\n                          width: \"30px\",\n                          height: \"30px\",\n                          borderRadius: \"50%\",\n                        }}\n                      />\n                      {option.name}\n                    </Box>\n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Movie Cast\"\n                    placeholder=\"Cast\"\n                  />\n                )}\n              />\n            </div>\n            <div>\n              <Autocomplete\n                multiple\n                id=\"tags-outlined\"\n                options={crew}\n                getOptionLabel={(option) => option.name || \"\"}\n                value={selectedCrew}\n                onChange={(event, newValue) => {\n                  setSelectedCrew(newValue);\n                }}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <Avatar\n                      key={option.name}\n                      src={option.profile_url}\n                      alt={option.name}\n                      sx={{\n                        width: 30,\n                        height: 30,\n                        marginRight: 1,\n                      }}\n                    />\n                    {option.name}\n                  </Box>\n                )}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Box\n                      {...getTagProps({ index })}\n                      component=\"div\"\n                      sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}\n                      key={index}\n                    >\n                      <img\n                        src={option.profile_url}\n                        alt={option.name}\n                        style={{\n                          width: \"30px\",\n                          height: \"30px\",\n                          borderRadius: \"50%\",\n                        }}\n                      />\n                      {option.name}\n                    </Box>\n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Movie Crew\"\n                    placeholder=\"Crew\"\n                  />\n                )}\n              />\n            </div>\n\n            {/* Certificate and Language side by side */}\n            <div style={{ display: \"flex\", gap: \"16px\" }}>\n              {/* Certificate Dropdown */}\n              <div>\n                <FormControl\n                  variant=\"outlined\"\n                  fullWidth\n                  style={{ width: \"200px\" }}\n                >\n                  <InputLabel>Certificate</InputLabel>\n                  <Select\n                    label=\"Certificate\"\n                    value={formData.certificate}\n                    onChange={handleInput}\n                    name=\"certificate\"\n                  >\n                    <MenuItem key=\"U\" value=\"U\">\n                      U\n                    </MenuItem>\n                    <MenuItem key=\"U/A\" value=\"U/A\">\n                      U/A\n                    </MenuItem>\n                    <MenuItem key=\"A\" value=\"A\">\n                      A\n                    </MenuItem>\n                  </Select>\n                </FormControl>\n              </div>\n\n              {/* Languages Dropdown */}\n              <div>\n                <TextField\n                  select\n                  value={formData.languages}\n                  onChange={handleInput}\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"languages\"\n                  SelectProps={{\n                    native: true,\n                  }}\n                >\n                  {languageOptions.map((language, index) => (\n                    <option key={index} value={language}>\n                      {language}\n                    </option>\n                  ))}\n                </TextField>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Submit\n            </Button>\n          </div>\n        </Box>\n      </form>\n    </div>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/[movieName]/page.tsx",["406"],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/add/page.tsx",["407","408","409","410"],[],"\"use client\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Box from \"@mui/material/Box\";\nimport Chip from \"@mui/material/Chip\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport FormControl from \"@mui/material/FormControl\";\nimport { Input, Paper, Typography } from \"@mui/material\";\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\nimport InnerPageContainer from \"@/src/app/components/dashboard/common/InnerPageContainer\";\nimport { any, string } from \"zod\";\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport { Theme, useTheme } from \"@mui/material\";\nimport theme from \"../../styles/theme\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { useRouter } from \"next/navigation\";\n\nconst top100Films = [\n  {\n    title: \"The Shawshank Redemption\",\n    year: 1994,\n    image:\n      \"https://upload.wikimedia.org/wikipedia/en/8/81/ShawshankRedemptionMoviePoster.jpg\",\n  },\n  {\n    title: \"The Godfather\",\n    year: 1972,\n    image: \"https://upload.wikimedia.org/wikipedia/en/1/1c/Godfather_ver1.jpg\",\n  },\n];\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    movieName: \"\",\n    AboutTheMovie: \"\",\n    movieTrailerLink: \"\",\n    Runtime: \"\",\n    genre: [] as string[],\n    format: [] as string[],\n    endDate: \"\",\n    releaseDate: \"\",\n    cast: \"\",\n    crew: \"\",\n    certificate: \"\",\n    languages: \"\",\n  });\n\n  const genres = [\n    \"Action\",\n    \"Drama\",\n    \"Comedy\",\n    \"Science Fiction\",\n    \"Horror\",\n    \"Romance\",\n    \"Fantasy\",\n    \"Thriller\",\n    \"Adventure\",\n    \"Mystery\",\n  ];\n  const formats = [\"IMAX 70mm\", \"4DX\", \"3D\", \"SD\"];\n\n  const router = useRouter();\n\n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n\n  function getStyles(\n    name: string,\n    personName: readonly string[],\n    theme: Theme\n  ) {\n    return {\n      fontWeight:\n        personName.indexOf(name) === -1\n          ? theme.typography.fontWeightRegular\n          : theme.typography.fontWeightMedium,\n    };\n  }\n\n  const languageOptions = [\n    \"Select a language\",\n    \"English\",\n    \"Spanish\",\n    \"French\",\n    \"German\",\n    \"Mandarin Chinese\",\n    \"Hindi\",\n    \"Japanese\",\n    \"Korean\",\n    \"Italian\",\n    \"Russian\",\n    \"Portuguese\",\n    \"Arabic\",\n    \"Turkish\",\n    \"Persian\",\n    \"Swedish\",\n    \"Danish\",\n    \"Norwegian\",\n    \"Finnish\",\n    \"Dutch\",\n    \"Greek\",\n    \"Polish\",\n    \"Hungarian\",\n    \"Czech\",\n    \"Thai\",\n    \"Hebrew\",\n    \"Tamil\",\n    \"Telugu\",\n    \"Bengali\",\n  ];\n  const [formSuccess, setFormSuccess] = useState(false);\n  const [isEditable, setIsEditable] = useState(false);\n  const [formSuccessMessage, setFormSuccessMessage] = useState(\"\");\n\n  const handleInput = (e: any) => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    setFormData((prevState) => ({\n      ...prevState,\n      [fieldName]: fieldValue,\n    }));\n  };\n  const [selectedFiles, setSelectedFiles] = useState<File[] | null>(null);\n\n  const handleFileChange = (e: any) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      console.log(files);\n      const selectedFilesArray: File[] = Array.from(files);\n      setSelectedFiles(selectedFilesArray); // Update the state\n    }\n  };\n  const handleGenreChange = (event: SelectChangeEvent<string[]>) => {\n    const {\n      target: { value },\n    } = event;\n    // 'value' will be of type string[] if the Select component is set to multiple\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      genre: value as string[], // Ensure the value is treated as string[]\n    }));\n  };\n  const [cast, setCast] = useState<CastMember[]>([]);\n  const [crew, setCrew] = useState<CrewMember[]>([]);\n  const [selectedCast, setSelectedCast] = useState<CastMember[]>([]);\n  const [selectedCrew, setSelectedCrew] = useState<CrewMember[]>([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // const response = await fetch(\"http://localhost:8080/artist/all\");\n        const data = await getDataFromEndPoint(\"\", `artist/all`, \"GET\");\n        // if (!response.ok) {\n        //   throw new Error(`Error: ${response.status}`);\n        // }\n        // const data = await response.json();\n        setCrew(data.Crew);\n        setCast(data.Cast);\n        console.log(data);\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n  const toggleEdit = () => {\n    setIsEditable(!isEditable);\n  };\n  interface CastMember {\n    id: string;\n    name: string;\n    profile_url: string;\n  }\n\n  interface CrewMember {\n    id: string;\n    name: string;\n    profile_url: string;\n  }\n\n  const submitForm = async (e: any) => {\n    e.preventDefault();\n    console.log(formData);\n    const data = new FormData();\n\n    Object.entries(formData).forEach(([key, value]) => {\n      if (key === \"genre\" || key === \"format\") {\n        // Join the array values into a single string with comma separation\n        data.append(key, (value as string[]).join(\", \"));\n      } else {\n        // Append non-array and other array values normally\n        data.append(key, value as string | Blob);\n      }\n    });\n\n    // If there's a file selected, append it to FormData\n    if (selectedFiles) {\n      selectedFiles.forEach((file, index) => {\n        data.append(`movieposter`, file);\n      });\n    }\n    data.append(\"castIds\", selectedCast.map((artist) => artist.id).join(\",\"));\n    console.log(selectedCrew);\n    data.append(\"crewIds\", selectedCrew.map((artist) => artist.id).join(\",\"));\n    const formURL = \"movie/add\"; // Replace with your form's URL\n    const response = await getDataFromEndPoint(data, formURL, \"POST\");\n    if (response.status === 200) {\n      router.push(\"/movies/all\");\n    }\n  };\n\n  const handleFormatChange = (event: SelectChangeEvent<string[]>) => {\n    const {\n      target: { value },\n    } = event;\n    // 'value' will be of type string[] if the Select component is set to multiple\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      format: value as string[], // Ensure the value is treated as string[]\n    }));\n  };\n\n  return (\n    <div\n      style={{\n        display: \"block\",\n        width: \"50%\",\n        margin: \"auto\",\n        paddingTop: \"100px\",\n      }}\n    >\n      <Paper\n        elevation={3}\n        style={{ padding: \"2px\", textAlign: \"center\", marginBottom: \"30px\" }}\n      >\n        <Typography\n          variant=\"h4\"\n          component=\"h1\"\n          style={{\n            fontFamily: \"Arial, sans-serif\",\n            fontSize: \"36px\",\n            fontWeight: \"bold\",\n            color: \"#333\", // Dark gray color\n            textTransform: \"uppercase\",\n            borderBottom: \"2px solid #0073e6\", // Blue underline\n            padding: \"10px 0\",\n            textAlign: \"center\",\n            letterSpacing: \"2px\", // Add letter spacing\n            textShadow: \"2px 2px 4px rgba(0, 0, 0, 0.2)\", // Subtle shadow\n          }}\n        >\n          Add Movie\n        </Typography>\n      </Paper>\n      <form method=\"POST\" onSubmit={submitForm}>\n        <Box\n          component=\"div\"\n          sx={{\n            backgroundColor: \"white\",\n            padding: \"15px\",\n            borderRadius: \"1px\",\n            boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.1)\", // Box shadow\n          }}\n        >\n          <div style={{ marginBottom: \"12px\" }}>\n            <div\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"1fr\",\n                gap: \"16px\",\n              }}\n            >\n              <div style={{ display: \"flex\", gap: \"20px\" }}>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"Movie Name\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"movieName\"\n                    placeholder=\"Movie Name\"\n                    onChange={handleInput}\n                    value={formData.movieName}\n                  />\n                </div>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"About the Movie\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"AboutTheMovie\"\n                    placeholder=\"About the Movie\"\n                    onChange={handleInput}\n                    value={formData.AboutTheMovie}\n                  />\n                </div>\n              </div>\n              <div>\n                <InputLabel htmlFor=\"end-date\" shrink>\n                  Movie Poster\n                </InputLabel>\n                <TextField\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"movieposter\"\n                  type=\"file\"\n                  onChange={handleFileChange}\n                  inputProps={{ multiple: true }}\n                />\n              </div>\n              <div style={{ display: \"flex\", gap: \"20px\" }}>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"Movie Trailer Link\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"movieTrailerLink\"\n                    onChange={handleInput}\n                    value={formData.movieTrailerLink}\n                  />\n                </div>\n                <div style={{ flex: 1 }}>\n                  <TextField\n                    label=\"Runtime\"\n                    variant=\"outlined\"\n                    fullWidth\n                    name=\"Runtime\"\n                    placeholder=\"Runtime\"\n                    onChange={handleInput}\n                    value={formData.Runtime}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div\n            style={{ display: \"grid\", gridTemplateColumns: \"1fr\", gap: \"16px\" }}\n          >\n            {/* Genres and Format side by side */}\n            <div style={{ display: \"flex\", gap: \"16px\" }}>\n              {/* Genre Selection */}\n              <div>\n                <FormControl sx={{ m: 1, width: 300 }}>\n                  <InputLabel id=\"demo-multiple-chip-label\">\n                    Select Genres\n                  </InputLabel>\n                  <Select\n                    labelId=\"demo-multiple-chip-label\"\n                    id=\"demo-multiple-chip\"\n                    multiple\n                    value={formData.genre}\n                    onChange={handleGenreChange}\n                    input={\n                      <OutlinedInput\n                        id=\"select-multiple-chip\"\n                        label=\"Select Genres\"\n                      />\n                    }\n                    renderValue={(selected) => (\n                      <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\n                        {selected.map((value) => (\n                          <Chip key={value} label={value} />\n                        ))}\n                      </Box>\n                    )}\n                    MenuProps={MenuProps}\n                  >\n                    {genres.map((genre) => (\n                      <MenuItem\n                        key={genre}\n                        value={genre}\n                        style={getStyles(genre, formData.genre, theme)}\n                      >\n                        {genre}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n\n              {/* Format Selection */}\n              <div>\n                <FormControl sx={{ m: 1, width: 300 }}>\n                  <InputLabel id=\"format-multiple-chip-label\">\n                    Select Format\n                  </InputLabel>\n                  <Select\n                    labelId=\"format-multiple-chip-label\"\n                    id=\"format-multiple-chip\"\n                    multiple\n                    value={formData.format}\n                    onChange={handleFormatChange}\n                    input={\n                      <OutlinedInput\n                        id=\"select-multiple-chip-format\"\n                        label=\"Select Format\"\n                      />\n                    }\n                    renderValue={(selected) => (\n                      <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\n                        {selected.map((value) => (\n                          <Chip key={value} label={value} />\n                        ))}\n                      </Box>\n                    )}\n                    MenuProps={MenuProps}\n                  >\n                    {formats.map((format) => (\n                      <MenuItem\n                        key={format}\n                        value={format}\n                        style={getStyles(format, formData.format, theme)}\n                      >\n                        {format}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n            </div>\n\n            {/* End Date and Release Date side by side */}\n            <div style={{ display: \"flex\", gap: \"16px\" }}>\n              {/* Date Pickers */}\n\n              <div>\n                <FormControl fullWidth variant=\"outlined\">\n                  <InputLabel htmlFor=\"Release-date\" shrink>\n                    Release Date\n                  </InputLabel>\n                  <Input\n                    id=\"Release-date\"\n                    type=\"date\"\n                    name=\"releaseDate\"\n                    value={formData.releaseDate}\n                    onChange={handleInput}\n                  />\n                </FormControl>\n              </div>\n              <div>\n                <FormControl fullWidth variant=\"outlined\">\n                  <InputLabel htmlFor=\"end-date\" shrink>\n                    End Date\n                  </InputLabel>\n                  <Input\n                    id=\"end-date\"\n                    type=\"date\"\n                    name=\"endDate\"\n                    value={formData.endDate}\n                    onChange={handleInput}\n                  />\n                </FormControl>\n              </div>\n            </div>\n\n            {/* Cast and Crew side by side */}\n\n            {/* Cast Input */}\n            <div>\n              <Autocomplete\n                multiple\n                id=\"tags-outlined\"\n                options={cast}\n                getOptionLabel={(option) => option.name || \"\"}\n                onChange={(event, newValue) => {\n                  setSelectedCast(newValue);\n                }}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <img\n                      src={option.profile_url}\n                      alt={option.name}\n                      style={{\n                        width: \"30px\",\n                        height: \"30px\",\n                        marginRight: \"10px\",\n                        borderRadius: \"50%\",\n                      }}\n                    />\n                    {option.name}\n                  </Box>\n                )}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Box\n                      {...getTagProps({ index })}\n                      component=\"div\"\n                      sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}\n                      key={index}\n                    >\n                      <img\n                        src={option.profile_url}\n                        alt={option.name}\n                        style={{\n                          width: \"30px\",\n                          height: \"30px\",\n                          borderRadius: \"50%\",\n                        }}\n                      />\n                      {option.name}\n                    </Box>\n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Movie Cast\"\n                    placeholder=\"Cast\"\n                  />\n                )}\n              />\n            </div>\n\n            {/* Crew Input */}\n            <div>\n              <Autocomplete\n                multiple\n                id=\"tags-outlined\"\n                options={crew}\n                getOptionLabel={(option) => option.name || \"\"}\n                onChange={(event, newValue) => {\n                  setSelectedCrew(newValue);\n                }}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <img\n                      src={option.profile_url}\n                      alt={option.name}\n                      style={{\n                        width: \"30px\",\n                        height: \"30px\",\n                        marginRight: \"10px\",\n                        borderRadius: \"50%\",\n                      }}\n                    />\n                    {option.name}\n                  </Box>\n                )}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Box\n                      {...getTagProps({ index })}\n                      component=\"div\"\n                      sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}\n                      key={index}\n                    >\n                      <img\n                        src={option.profile_url}\n                        alt={option.name}\n                        style={{\n                          width: \"30px\",\n                          height: \"30px\",\n                          borderRadius: \"50%\",\n                        }}\n                      />\n                      {option.name}\n                    </Box>\n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Movie Crew\"\n                    placeholder=\"Crew\"\n                  />\n                )}\n              />\n            </div>\n\n            {/* Certificate and Language side by side */}\n            <div style={{ display: \"flex\", gap: \"16px\" }}>\n              {/* Certificate Dropdown */}\n              <div>\n                <FormControl\n                  variant=\"outlined\"\n                  fullWidth\n                  style={{ width: \"200px\" }}\n                >\n                  <InputLabel>Certificate</InputLabel>\n                  <Select\n                    label=\"Certificate\"\n                    value={formData.certificate}\n                    onChange={handleInput}\n                    name=\"certificate\"\n                  >\n                    <MenuItem value=\"U\">U</MenuItem>\n                    <MenuItem value=\"U/A\">U/A</MenuItem>\n                    <MenuItem value=\"A\">A</MenuItem>\n                  </Select>\n                </FormControl>\n              </div>\n\n              {/* Languages Dropdown */}\n              <div>\n                <TextField\n                  select\n                  value={formData.languages}\n                  onChange={handleInput}\n                  variant=\"outlined\"\n                  fullWidth\n                  name=\"languages\"\n                  SelectProps={{\n                    native: true,\n                  }}\n                >\n                  {languageOptions.map((language, index) => (\n                    <option key={index} value={language}>\n                      {language}\n                    </option>\n                  ))}\n                </TextField>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Submit\n            </Button>\n          </div>\n        </Box>\n      </form>\n    </div>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/movies/all/page.tsx",["411"],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/personal_profile/page.tsx",["412"],[],"\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport InnerPageContainer from \"../components/dashboard/common/InnerPageContainer\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as zod from \"zod\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from \"@mui/material/Grid\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Box from \"@mui/material/Box\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport { FormHelperText, Paper } from \"@mui/material\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n} from \"react-places-autocomplete\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport dayjs from \"dayjs\"; // Ensure you have dayjs imported\nimport Script from \"next/script\";\nimport useStore from \"@/src/store\";\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\n\nconst profileSchema = zod.object({\n  email: zod.string().email({ message: \"Invalid email address\" }),\n  fullName: zod.string().min(1, { message: \"Full name is required\" }),\n  phoneNumber: zod.string().min(10, { message: \"Invalid phone number\" }),\n  dateOfBirth: zod.any(),\n  gender: zod.string().min(1, { message: \"Gender is required\" }),\n  address1: zod.string().min(1, { message: \"Address1 is required\" }),\n  address2: zod.string().optional(),\n  city: zod.string().min(1, { message: \"City is required\" }),\n  state: zod.string().min(1, { message: \"State is required\" }),\n  country: zod.string().min(1, { message: \"Country is required\" }),\n  zipCode: zod.string().min(1, { message: \"Zip Code is required\" }),\n  genres: zod.array(zod.string()).nonempty(\"Select atleast one genre\"),\n  favoriteCast: zod.array(zod.string()).nonempty(\"Select atleast one artist\"),\n  favoriteCrew: zod.array(zod.string()).nonempty(\"Select atleast one crew\"),\n  preferredLanguages: zod\n    .array(zod.string())\n    .nonempty(\"Select atleast one language\"),\n});\n\nconst genres = [\n  \"Action\",\n  \"Drama\",\n  \"Comedy\",\n  \"Science Fiction\",\n  \"Horror\",\n  \"Romance\",\n  \"Fantasy\",\n  \"Thriller\",\n  \"Adventure\",\n  \"Mystery\",\n];\n\nconst languages = [\n  \"English\",\n  \"Spanish\",\n  \"French\",\n  \"German\",\n  \"Mandarin Chinese\",\n  \"Hindi\",\n  \"Japanese\",\n  \"Korean\",\n  \"Italian\",\n  \"Russian\",\n  \"Portuguese\",\n  \"Arabic\",\n  \"Turkish\",\n  \"Persian\",\n  \"Swedish\",\n  \"Danish\",\n  \"Norwegian\",\n  \"Finnish\",\n  \"Dutch\",\n  \"Greek\",\n  \"Polish\",\n  \"Hungarian\",\n  \"Czech\",\n  \"Thai\",\n  \"Hebrew\",\n  \"Tamil\",\n  \"Telugu\",\n  \"Bengali\",\n];\n\nexport default function Profile() {\n  const [selectedFile, setSelectedFile] = React.useState<any>(null);\n  const [address, setAddress] = React.useState(\"\");\n  const [castData, setCastData] = useState<any>([]);\n  const [crewData, setCrewData] = useState<any>([]);\n  const [isScriptLoaded, setIsScriptLoaded] = useState(false);\n  const store: any = useStore();\n  const [imageURl, setImageUrl] = useState<string>(\"\");\n  const [editEnabled, setEditEnabled] = useState<boolean>(false);\n  const [userData, setUserData] = useState<any>({});\n\n  const {\n    register,\n    control,\n    formState: { errors },\n    getValues,\n    trigger,\n    setValue,\n  } = useForm({\n    resolver: zodResolver(profileSchema),\n  });\n\n  React.useEffect(() => {\n    const userId = store.user.user_id;\n    const fetchProfileDetails = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/user/profileDetails/${userId}`);\n        const completeJSON = await response.json();\n        const data = completeJSON.data;\n        setUserData(data);\n        setValue(\"email\", data.email);\n        setValue(\"fullName\", data.fullname); // Assuming 'fullName' is the correct field name\n        setValue(\"phoneNumber\", data.mobile);\n        setValue(\"dateOfBirth\", dayjs(data.dob)); // Convert to Dayjs object\n        setValue(\"gender\", data.gender);\n        setValue(\"address1\", data.address1);\n        setAddress(data.address1);\n        setValue(\"address2\", data.address2);\n        setValue(\"city\", data.city);\n        setValue(\"state\", data.state);\n        setValue(\"country\", data.country);\n        setValue(\"zipCode\", data.zipcode); // Assuming 'zipCode' is the correct field name\n        setValue(\"preferredLanguages\", data.preferred_languages[0].split(\", \")); // Assuming the data is a comma-separated string\n        setValue(\"genres\", data.genres[0].split(\", \")); // Assuming the data is a comma-separated string\n        if (data.favourite_artists.length > 0) {\n          setValue(\"favoriteCast\", data.favourite_artists[0].split(\",\")); // Assuming the data is already in the correct format\n        }\n        if (data.favourite_crew.length > 0) {\n          setValue(\"favoriteCrew\", data.favourite_crew[0].split(\",\")); // Assuming the data is already in the correct format\n        }\n        setImageUrl(data.profile_url);\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    };\n\n    const fetchArtistData = async () => {\n      try {\n        // const response = await fetch(\"http://localhost:8080/artist/all\");\n        const data = await getDataFromEndPoint(\"\", `artist/all`, \"GET\");\n        // if (!response.ok) {\n        //   throw new Error(`Error: ${response.status}`);\n        // }\n        // const data = await response.json();\n        setCrewData(data.Crew);\n        setCastData(data.Cast);\n        fetchProfileDetails();\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    };\n\n    fetchArtistData();\n  }, []);\n\n  const handleScriptLoad = () => {\n    setIsScriptLoaded(true);\n    console.log(\"Google Maps script loaded successfully.\");\n  };\n\n  const handleSelect = async (value: string) => {\n    const results = await geocodeByAddress(value);\n    const addressComponents = results[0].address_components;\n\n    const getAddressComponent = (type: string) => {\n      return (\n        addressComponents.find((component) => component.types.includes(type))\n          ?.long_name || \"\"\n      );\n    };\n    const street = getAddressComponent(\"route\");\n    const streetNumber = getAddressComponent(\"street_number\");\n    const formattedAddress1 = `${streetNumber} ${street}`;\n\n    setAddress(formattedAddress1);\n    setValue(\"address1\", formattedAddress1);\n    setValue(\"city\", getAddressComponent(\"locality\"));\n    setValue(\"state\", getAddressComponent(\"administrative_area_level_1\"));\n    setValue(\"country\", getAddressComponent(\"country\"));\n    setValue(\"zipCode\", getAddressComponent(\"postal_code\"));\n  };\n\n  const getErrorMessage = (error: any) => {\n    return error && typeof error.message === \"string\" ? error.message : \"\";\n  };\n\n  const handleFileChange = (e: any) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      setSelectedFile(file);\n      setImageUrl(URL.createObjectURL(selectedFile));\n    }\n  };\n\n  function cancelEdit() {\n    const data = userData;\n    setValue(\"email\", data.email);\n    setValue(\"fullName\", data.fullname); // Assuming 'fullName' is the correct field name\n    setValue(\"phoneNumber\", data.mobile);\n    setValue(\"dateOfBirth\", dayjs(data.dob)); // Convert to Dayjs object\n    setValue(\"gender\", data.gender);\n    setValue(\"address1\", data.address1);\n    setAddress(data.address1);\n    setValue(\"address2\", data.address2);\n    setValue(\"city\", data.city);\n    setValue(\"state\", data.state);\n    setValue(\"country\", data.country);\n    setValue(\"zipCode\", data.zipcode); // Assuming 'zipCode' is the correct field name\n    setValue(\"preferredLanguages\", data.preferred_languages[0].split(\", \")); // Assuming the data is a comma-separated string\n    setValue(\"genres\", data.genres[0].split(\", \")); // Assuming the data is a comma-separated string\n    if (data.favourite_artists.length > 0) {\n      setValue(\"favoriteCast\", data.favourite_artists[0].split(\",\")); // Assuming the data is already in the correct format\n    }\n    if (data.favourite_crew.length > 0) {\n      setValue(\"favoriteCrew\", data.favourite_crew[0].split(\",\")); // Assuming the data is already in the correct format\n    }\n    setSelectedFile(null);\n    setImageUrl(data.profile_url);\n    setEditEnabled(false);\n  }\n\n  async function submitData() {\n    trigger();\n    if (Object.keys(errors).length == 0) {\n      const reqData = new FormData();\n      let data = getValues();\n      Object.entries(data).forEach(([key, value]) => {\n        if (key == \"selectedFile\") {\n          reqData.append(\"file\", value as string | Blob);\n        } else {\n          if (Array.isArray(value)) {\n            reqData.append(key, (value as string[]).join(\", \"));\n          } else {\n            reqData.append(key, value as string);\n          }\n        }\n      });\n      reqData.append('id', userData.user_id);\n      await getDataFromEndPoint(reqData, `user/updateProfile`, 'POST');\n      setEditEnabled(false);\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: \"block\",\n        width: \"50%\",\n        margin: \"auto\",\n        paddingTop: \"60px\",\n      }}\n    >\n      <Script\n        src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAH_4KikoUaqV41Fq09gBEsXzADYU1xM8w&libraries=places\"\n        strategy=\"afterInteractive\"\n        onLoad={handleScriptLoad}\n      />\n      <form>\n        <InnerPageContainer title=\"Hi..\">\n          <Paper elevation={3} sx={{ padding: 3, marginBottom: 3 }}>\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Personal Details\n              </Typography>\n              {!editEnabled && (\n                <Button\n                  startIcon={<EditIcon />}\n                  onClick={() => setEditEnabled(true)}\n                />\n              )}\n            </Box>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <Avatar\n                    sx={{ width: 100, height: 100 }}\n                    src={\n                      selectedFile\n                        ? URL.createObjectURL(selectedFile)\n                        : imageURl\n                    }\n                  />\n                </Box>\n                {editEnabled && (\n                  <Box\n                    sx={{ display: \"flex\", justifyContent: \"center\", mt: 1 }}\n                  >\n                    <Button\n                      sx={{ width: 200 }}\n                      component=\"label\"\n                      variant=\"contained\"\n                      startIcon={<CloudUploadIcon />}\n                    >\n                      Upload file\n                      <input type=\"file\" hidden onChange={handleFileChange} />\n                    </Button>\n                  </Box>\n                )}\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"email\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.email)}\n                      helperText={getErrorMessage(errors.email)}\n                      id=\"email\"\n                      name=\"email\"\n                      inputProps={{ readOnly: true }}\n                      label=\"Email ID\"\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"fullName\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.fullName)}\n                      helperText={getErrorMessage(errors.fullName)}\n                      id=\"fullName\"\n                      name=\"fullName\"\n                      inputProps={{ readOnly: !editEnabled }}\n                      label=\"Full Name\"\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"phoneNumber\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.phoneNumber)}\n                      helperText={getErrorMessage(errors.phoneNumber)}\n                      id=\"phoneNumber\"\n                      name=\"phoneNumber\"\n                      label=\"Phone Number\"\n                      inputProps={{ readOnly: !editEnabled }}\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <Controller\n                  name=\"dateOfBirth\"\n                  control={control}\n                  defaultValue={null}\n                  render={({ field }) => (\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      {!editEnabled ? (\n                        <TextField\n                          {...field}\n                          label=\"SelectDate\"\n                          value={field.value ? dayjs(field.value).format('MM/DD/YYYY') : ''}\n                          disabled={!editEnabled}\n                          fullWidth\n                          variant=\"outlined\"\n                          InputLabelProps={{\n                            shrink: Boolean(field.value),\n                          }}\n                        />\n                      ) : (\n                        <DatePicker\n                          sx={{ width: \"100%\" }}\n                          label=\"Date of Birth\"\n                          {...field}\n                        />\n                      )\n                      }\n                    </LocalizationProvider>\n                  )}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <FormControl fullWidth>\n                  <InputLabel id=\"gender-label\">Gender</InputLabel>\n                  <Controller\n                    name=\"gender\"\n                    control={control}\n                    defaultValue=\"\"\n                    render={({ field }) => {\n                      return (\n                        <Select\n                          {...field}\n                          labelId=\"gender-label\"\n                          inputProps={{ readOnly: !editEnabled }}\n                          label=\"Gender\"\n                          variant=\"standard\"\n                          error={Boolean(errors.gender)}\n                        >\n                          <MenuItem value=\"male\">Male</MenuItem>\n                          <MenuItem value=\"female\">Female</MenuItem>\n                          <MenuItem value=\"other\">Other</MenuItem>\n                        </Select>\n                      );\n                    }}\n                  />\n                  <Typography variant=\"inherit\" color=\"textSecondary\">\n                    {getErrorMessage(errors.gender)}\n                  </Typography>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Typography sx={{ mt: 5 }} variant=\"h6\" gutterBottom>\n              Address Details\n            </Typography>\n            <Grid container spacing={3}>\n              <Grid item xs={6}>\n                {isScriptLoaded && (\n                  <PlacesAutocomplete\n                    value={address}\n                    onChange={setAddress}\n                    onSelect={handleSelect}\n                  >\n                    {({\n                      getInputProps,\n                      suggestions,\n                      getSuggestionItemProps,\n                      loading,\n                    }) => (\n                      <Box>\n                        <TextField\n                          {...getInputProps({\n                            label: \"Address1\",\n                          })}\n                          variant=\"standard\"\n                          fullWidth\n                          inputProps={{ readOnly: !editEnabled }}\n                          error={Boolean(errors.address1)}\n                          helperText={getErrorMessage(errors.address1)}\n                        />\n                        {loading && <div>Loading...</div>}\n                        <List\n                          sx={{\n                            position: \"absolute\",\n                            zIndex: 1,\n                            width: \"100%\",\n                          }}\n                        >\n                          {suggestions.map((suggestion) => (\n                            <ListItem\n                              {...getSuggestionItemProps(suggestion)}\n                              sx={{\n                                backgroundColor: suggestion.active\n                                  ? \"#b9d2fa\"\n                                  : \"#ffffff\",\n                                cursor: \"pointer\",\n                              }}\n                              key={suggestion.placeId}\n                            >\n                              {suggestion.description}\n                            </ListItem>\n                          ))}\n                        </List>\n                      </Box>\n                    )}\n                  </PlacesAutocomplete>\n                )}\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"address2\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.address2)}\n                      helperText={getErrorMessage(errors.address2)}\n                      id=\"address2\"\n                      inputProps={{ readOnly: !editEnabled }}\n                      name=\"address2\"\n                      label=\"Address line 2\"\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"city\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.city)}\n                      helperText={getErrorMessage(errors.city)}\n                      id=\"city\"\n                      name=\"city\"\n                      inputProps={{ readOnly: !editEnabled }}\n                      label=\"City\"\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"state\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.state)}\n                      helperText={getErrorMessage(errors.state)}\n                      id=\"state\"\n                      name=\"state\"\n                      inputProps={{ readOnly: !editEnabled }}\n                      label=\"State/Province/Region\"\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"country\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.country)}\n                      helperText={getErrorMessage(errors.country)}\n                      id=\"country\"\n                      name=\"country\"\n                      label=\"Country\"\n                      inputProps={{ readOnly: !editEnabled }}\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <Controller\n                  name=\"zipCode\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      error={Boolean(errors.zipCode)}\n                      helperText={getErrorMessage(errors.zipCode)}\n                      id=\"zipCode\"\n                      name=\"zipCode\"\n                      inputProps={{ readOnly: !editEnabled }}\n                      label=\"Zip / Postal code\"\n                      fullWidth\n                      variant=\"standard\"\n                      InputLabelProps={{\n                        shrink: Boolean(field.value),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n            </Grid>\n            <Typography sx={{ mt: 5 }} variant=\"h6\" gutterBottom>\n              Additional Details\n            </Typography>\n\n            <FormControl fullWidth margin=\"normal\">\n              <InputLabel htmlFor=\"genres\">Genres</InputLabel>\n              <Controller\n                name=\"genres\"\n                control={control}\n                defaultValue={[]}\n                render={({ field }) => (\n                  <div>\n                    <Select\n                      multiple\n                      value={field.value}\n                      inputProps={{ readOnly: !editEnabled }}\n                      fullWidth\n                      onChange={(e) => field.onChange(e.target.value)}\n                      error={!!errors.genres}\n                      label=\"Genres\"\n                    >\n                      {genres.map((genre) => (\n                        <MenuItem key={genre} value={genre}>\n                          {genre}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText error={!!errors.genres}>\n                      {getErrorMessage(errors.genres)}\n                    </FormHelperText>\n                  </div>\n                )}\n              />\n            </FormControl>\n\n            <FormControl fullWidth margin=\"normal\">\n              <InputLabel htmlFor=\"favoriteCast\">Favorite Cast</InputLabel>\n              <Controller\n                name=\"favoriteCast\"\n                control={control}\n                defaultValue={[]}\n                render={({ field }) => (\n                  <div>\n                    <Select\n                      multiple\n                      value={field.value}\n                      inputProps={{ readOnly: !editEnabled }}\n                      fullWidth\n                      onChange={(e) => field.onChange(e.target.value)}\n                      error={!!errors.favoriteCast}\n                      label=\"Favorite Casr\"\n                    >\n                      {castData.map((cast: any) => (\n                        <MenuItem key={cast.id} value={cast.id}>\n                          {cast.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText error={!!errors.favoriteCast}>\n                      {getErrorMessage(errors.favoriteCast)}\n                    </FormHelperText>\n                  </div>\n                )}\n              />\n            </FormControl>\n\n            <FormControl fullWidth margin=\"normal\">\n              <InputLabel htmlFor=\"favoriteCrew\">Favorite Crew</InputLabel>\n              <Controller\n                name=\"favoriteCrew\"\n                control={control}\n                defaultValue={[]}\n                render={({ field }) => (\n                  <div>\n                    <Select\n                      multiple\n                      value={field.value}\n                      fullWidth\n                      inputProps={{ readOnly: !editEnabled }}\n                      onChange={(e) => field.onChange(e.target.value)}\n                      error={!!errors.favoriteCrew}\n                      label=\"Favorite Crew\"\n                    >\n                      {crewData.map((crew: any) => (\n                        <MenuItem key={crew.id} value={crew.id}>\n                          {crew.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText error={!!errors.favoriteCrew}>\n                      {getErrorMessage(errors.favoriteCrew)}\n                    </FormHelperText>\n                  </div>\n                )}\n              />\n            </FormControl>\n\n            <FormControl fullWidth margin=\"normal\">\n              <InputLabel htmlFor=\"preferredLanguages\">\n                Preferred Languages\n              </InputLabel>\n              <Controller\n                name=\"preferredLanguages\"\n                control={control}\n                defaultValue={[]}\n                render={({ field }) => (\n                  <div>\n                    <Select\n                      multiple\n                      value={field.value}\n                      fullWidth\n                      inputProps={{ readOnly: !editEnabled }}\n                      onChange={(e) => field.onChange(e.target.value)}\n                      error={!!errors.preferredLanguages}\n                      label=\"Preferred Languages\"\n                    >\n                      {languages.map((language) => (\n                        <MenuItem key={language} value={language}>\n                          {language}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    <FormHelperText error={!!errors.preferredLanguages}>\n                      {getErrorMessage(errors.preferredLanguages)}\n                    </FormHelperText>\n                  </div>\n                )}\n              />\n            </FormControl>\n            {editEnabled && (\n              <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n                <Button\n                  onClick={() => submitData()}\n                  variant=\"contained\"\n                  endIcon={<SendIcon />}\n                  sx={{ mt: 2, mr: 5 }}\n                >\n                  Submit\n                </Button>\n                <Button\n                  onClick={() => cancelEdit()}\n                  variant=\"outlined\"\n                  sx={{ mt: 2 }}\n                >\n                  Cancel\n                </Button>\n              </Box>\n            )}\n          </Paper>\n        </InnerPageContainer>\n      </form>\n    </div>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/purchases/page.tsx",["413","414"],[],"// Import necessary modules and components\n'use client'\nimport React, { useState, useEffect } from 'react';\nimport InnerPageContainer from '../components/dashboard/common/InnerPageContainer';\nimport useStore from '@/src/store';\nimport './pur.css';\nimport { Card, CardMedia, CardContent, Typography, Grid, Chip, CardActions, Button, Modal, Box, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\nimport QrCodeIcon from '@mui/icons-material/QrCode';\nimport { Stack } from '@mui/system';\nimport { getDataFromEndPoint } from '@/src/lib/backend-api';\nimport { useRouter } from 'next/navigation'; // Import the useRouter hook\n\n// Define interfaces for Movie and Ticket\ninterface Movie {\n  name: string;\n  poster_url: string;\n}\n\ninterface Ticket {\n  details: {\n    _id: string;\n    id: string;\n    user_id: string;\n    movie_id: string;\n    payment_method: string;\n    price: number;\n    qr_code: string;\n    refund_requested: boolean;\n    refund_status: string;\n    screen_id: string;\n    seat_ids: string[];\n    show_date: string;\n    show_time: string;\n    status: string;\n    theater_id: string;\n    __v: number;\n  };\n  movie: Movie;\n  theater: string;\n  qr_url: string;\n}\n\n// TicketsPage component\nconst TicketsPage: React.FC = () => {\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [open, setOpen] = useState(false);\n  const store: any = useStore(); // Cast to 'any' if Store type is not defined\n\n  const fetchTickets = async () => {\n    try {\n      // const response = await fetch(`http://localhost:8080/user/getPurchaseHistory/${store.user?.user_id}`);\n      const jsonResponse = await getDataFromEndPoint(\"\", `user/getPurchaseHistory/${store.user?.user_id}`, \"GET\")\n      // if (!response.ok) {\n      //   throw new Error(`HTTP error! status: ${response.status}`);\n      // }\n      // const jsonResponse = await response.json();\n      if (!jsonResponse || !Array.isArray(jsonResponse.data)) {\n        throw new Error('Data is not in the expected format');\n      }\n      setTickets(jsonResponse.data);\n      setIsLoading(false);\n    } catch (e) {\n      const error = e as Error;\n      console.error('Fetching tickets failed: ', error);\n      setError(error.message);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (store.user?.user_id) {\n      fetchTickets();\n    } else {\n      setError('User ID is not available.');\n      setIsLoading(false);\n    }\n  }, []);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  function refresh() {\n    fetchTickets();\n  }\n\n  return (\n    <Grid item xs={4} sx={{ paddingLeft: '90px' }}>\n      <InnerPageContainer title=\"Purchases\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Your Tickets</h1>\n          <div className=\"ticket-grid\">\n            {tickets.map((ticket, index) => (\n              <TicketCard key={index} ticket={ticket} refresh={refresh} />\n            ))}\n          </div>\n        </div>\n      </InnerPageContainer>\n    </Grid>\n  );\n};\n\nconst TicketCard: React.FC<{ ticket: Ticket, refresh: any }> = ({ ticket, refresh }) => {\n  const qrCodeSrc = ticket.qr_url;\n  const router = useRouter();\n  const [isModalOpen, setModalOpen] = useState(false);\n  const handleCancel = () => {\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    refresh();\n    setModalOpen(false);\n  };\n  const handleYes = async () => {\n    const cancel_data = await getDataFromEndPoint(ticket, 'user/cancelTicket', \"POST\");\n    setModalOpen(false);\n    refresh();\n  };\n  return (\n    <Card sx={{ m: 2, boxShadow: 3, width: '500px', height: '400px', padding: '0px 0px' }}>\n      <CardMedia\n        component=\"img\"\n        height=\"140\"\n        image={ticket.movie.poster_url}\n        alt={`${ticket.movie.name} Poster`}\n      />\n      <Grid container spacing={2}>\n        <Grid item xs={8}>\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\n              {ticket.movie.name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {ticket.theater}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {new Date(ticket.details.show_date).toLocaleDateString()} • {ticket.details.show_time}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Screen: {ticket.details.screen_id}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Seats: {ticket.details.seat_ids ? ticket.details.seat_ids.join(', ') : 'No seats available'}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Price: ${ticket.details.price}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={4}>\n          <Stack direction=\"column\" spacing={2} >\n            {ticket.details.refund_requested ? '' : <img src={qrCodeSrc} alt=\"QR Code\" style={{ maxWidth: '100%', maxHeight: '100%', height: 'auto' }} />}\n            {ticket.details.refund_requested ? '' : <Button sx={{ color: 'red' }} onClick={handleCancel}>Cancel</Button>}\n          </Stack>\n          <Box mt={5}>\n            <Typography variant=\"subtitle1\" >\n              {ticket.details.refund_requested ? <Chip label=\"Cancelled\" color=\"error\" /> : ''}\n            </Typography>\n          </Box>\n        </Grid>\n        <Dialog open={isModalOpen} onClose={handleCloseModal}>\n          <DialogTitle>Confirmation</DialogTitle>\n          <DialogContent>\n            Are you sure you want to cancel?\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleCloseModal} color=\"primary\">\n              No\n            </Button>\n            <Button onClick={handleYes} sx={{ color: 'red' }} >\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Grid>\n    </Card>\n  );\n};\n\nexport default TicketsPage;\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/rewards/page.tsx",["415"],[],"'use client'\nimport React, { useEffect, useState } from 'react';\nimport { Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Button, Paper, Grid, Card, CardContent, LinearProgress } from '@mui/material';\nimport { styled } from '@mui/system';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { useRouter } from 'next/navigation';\nimport Parallax from './parallax/page';\nimport useStore from '@/src/store';\nimport { getDataFromEndPoint } from '@/src/lib/backend-api';\n\n\n\n// Styled components with theme\nconst BenefitsContainer = styled(Box)(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  padding: theme.spacing(4),\n  marginTop: theme.spacing(4),\n}));\n\nconst CheckmarkIcon = styled(CheckIcon)(({ theme }) => ({\n  color: theme.palette.success.main,\n}));\n\nconst JoinButton = styled(Button)(({ theme }) => ({\n  marginTop: theme.spacing(2),\n  padding: theme.spacing(1),\n  backgroundColor: theme.palette.primary.main,\n  color: theme.palette.getContrastText(theme.palette.primary.main),\n  '&:hover': {\n    backgroundColor: theme.palette.primary.dark,\n  },\n}));\n\nconst MemberBenefitsSection = () => {\n  const benefits = [\n    \"Price Per Month\",\n    \"Earn 1 Point for Every $1 Spent\",\n    \"Redeem Points for Tickets and More Rewards\",\n    \"Exclusive Member Offers\",\n    \"Extra Discount Tuesday Savings\",\n    \"Special Birthday Treat\",\n    \"1 Ticket Per Month\",\n    \"20% Off Concessions\",\n    \"Waived Online Fees\",\n    \"Unused Ticket Credits Roll Over\",\n    \"Member Pricing for Additional Tickets\",\n    \"Member Access to Screenings and Advance Tickets\",\n  ];\n\n  // This should be determined based on your actual data\n  const tierBenefits: any = {\n    movieClub: [\n      \"Price Per Month\",\n      \"Earn 1 Point for Every $1 Spent\",\n      \"Redeem Points for Tickets and More Rewards\",\n      \"Exclusive Member Offers\",\n      \"Extra Discount Tuesday Savings\",\n      \"Special Birthday Treat\",\n      \"1 Ticket Per Month\",\n      \"20% Off Concessions\",\n      \"Waived Online Fees\",\n      \"Unused Ticket Credits Roll Over\",\n      \"Member Pricing for Additional Tickets\",\n      \"Member Access to Screenings and Advance Tickets\",\n    ],\n    movieFan: [\n      \"Price Per Month\",\n      \"Earn 1 Point for Every $1 Spent\",\n      \"Redeem Points for Tickets and More Rewards\",\n      \"Exclusive Member Offers\",\n      \"Extra Discount Tuesday Savings\",\n      \"Special Birthday Treat\",\n    ],\n  };\n\n  const tierIncludesBenefit = (tier: string, benefit: string) => {\n    return tierBenefits[tier]?.includes(benefit) || false;\n  };\n\n  return (\n    <BenefitsContainer>\n      <Typography variant=\"h5\" gutterBottom>\n        Movie-Lover, Select Your Tier\n      </Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Benefits</TableCell>\n              <TableCell align=\"center\">Movie Club</TableCell>\n              <TableCell align=\"center\">Movie Fan</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {benefits.map((benefit, index) => (\n              <TableRow key={index}>\n                <TableCell>{benefit}</TableCell>\n                <TableCell align=\"center\">{tierIncludesBenefit('movieClub', benefit) && <CheckmarkIcon />}</TableCell>\n                <TableCell align=\"center\">{tierIncludesBenefit('movieFan', benefit) && <CheckmarkIcon />}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </BenefitsContainer>\n  );\n};\n\nconst StyledCard = styled(Card)({\n  backgroundColor: '#333', // Dark background color\n  color: 'white', // White text color\n  margin: '1rem',\n  padding: '1rem',\n});\n\nconst StyledCardContent = styled(CardContent)({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexDirection: 'column',\n});\n\nconst PriceTag = styled('div')({\n  backgroundColor: 'red',\n  padding: '0.5rem 1rem',\n  fontSize: '1.5rem',\n  fontWeight: 'bold',\n  marginBottom: '0.5rem',\n});\n\nconst BenefitDescription = styled(Typography)({\n  fontSize: '0.8rem',\n  fontWeight: 'normal',\n});\n\nconst LinearProgressWithLabel = (props: any) => (\n  <Box display=\"flex\" alignItems=\"center\">\n    <Box width=\"100%\" mr={1}>\n      <LinearProgress variant=\"determinate\" {...props} />\n    </Box>\n    <Box minWidth={35}>\n      <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(props.value)}%`}</Typography>\n    </Box>\n  </Box>\n);\n\nconst RewardsProgress = ({ points, goal }: { points: any, goal: any }) => {\n  const progress = (points / goal) * 100;\n\n  return (\n    <Box padding={3}>\n      <Typography variant=\"h6\">Get Rewarded</Typography>\n      <LinearProgressWithLabel value={progress} />\n      <Typography>Your Points: {points}</Typography>\n    </Box>\n  );\n};\n\nconst RewardsPage = () => {\n  const store: any = useStore();\n  const router = useRouter();\n  const totalPoints = 200;\n  const goalPoints = 280;\n  const [points, setPoints] = useState(\"\");\n  const primeUrl = `http://ec2-3-101-12-15.us-west-1.compute.amazonaws.com/api/payment/prime/checkout_sessions/${store.user.user_id}`;\n  async function getRewards() {\n    const result = await getDataFromEndPoint(\"\", `user/getRewards/${store.user.user_id}`, \"GET\")\n    console.log(result);\n    setPoints(result.data);\n    console.log(points)\n  }\n  async function joinNow() {\n    const response = await getDataFromEndPoint('', `payment/prime/checkout_sessions/${store.user.user_id}`, 'GET');\n    console.log(response);\n  }\n  useEffect(() => {\n    getRewards();\n  }, []);\n\n  return (\n    <Box sx={{ flexGrow: 1, padding: 3 }}>\n      <Parallax />\n\n      <Grid container spacing={2}>\n        <Grid item xs={4}>\n          <StyledCard>\n            <StyledCardContent>\n              <PriceTag>$8.99/month</PriceTag>\n              <BenefitDescription>One 2D ticket per month*</BenefitDescription>\n              <BenefitDescription>Unused tickets roll over</BenefitDescription>\n            </StyledCardContent>\n          </StyledCard>\n        </Grid>\n        <Grid item xs={4}>\n          <StyledCard>\n            <StyledCardContent>\n              <Typography variant='h5'>Rewards</Typography>\n              {points ? <PriceTag>{points}</PriceTag> : <PriceTag>Points</PriceTag>}\n              <BenefitDescription>Points</BenefitDescription>\n              <BenefitDescription></BenefitDescription>\n            </StyledCardContent>\n          </StyledCard>\n        </Grid>\n        <Grid item xs={4}>\n          <StyledCard>\n            <StyledCardContent>\n              <PriceTag>NO ONLINE FEES</PriceTag>\n              <BenefitDescription>Waived online fees</BenefitDescription>\n              <BenefitDescription>Add-on tickets for $8.99</BenefitDescription>\n            </StyledCardContent>\n          </StyledCard>\n        </Grid>\n      </Grid>\n      {/* <RewardsProgress points={totalPoints} goal={goalPoints} /> */}\n      <MemberBenefitsSection />\n      {!store.user.is_prime &&\n        <form action={primeUrl} method='GET'>\n          <JoinButton type=\"submit\" variant=\"contained\">Join Now</JoinButton>\n        </form>\n      }\n    </Box>\n  );\n};\n\nexport default RewardsPage;\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/rewards/parallax/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signin/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/AdditionalDetailsForm.tsx",["416"],[],"// components/AdditionalDetailsForm.js\nimport React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n} from '@mui/material';\nimport { getDataFromEndPoint } from '@/src/lib/backend-api';\n\nconst schema = z.object({\n  genres: z.array(z.string()).nonempty('Select atleast one genre'),\n  favoriteCast: z.array(z.string()).nonempty('Select atleast one artist'),\n  favoriteCrew: z.array(z.string()).nonempty('Select atleast one crew'),\n  preferredLanguages: z.array(z.string()).nonempty('Select atleast one language'),\n});\n\nconst genres = [\n  \"Action\",\n  \"Drama\",\n  \"Comedy\",\n  \"Science Fiction\",\n  \"Horror\",\n  \"Romance\",\n  \"Fantasy\",\n  \"Thriller\",\n  \"Adventure\",\n  \"Mystery\",\n];\n\nconst languages = [\n  \"English\",\n  \"Spanish\",\n  \"French\",\n  \"German\",\n  \"Mandarin Chinese\",\n  \"Hindi\",\n  \"Japanese\",\n  \"Korean\",\n  \"Italian\",\n  \"Russian\",\n  \"Portuguese\",\n  \"Arabic\",\n  \"Turkish\",\n  \"Persian\",\n  \"Swedish\",\n  \"Danish\",\n  \"Norwegian\",\n  \"Finnish\",\n  \"Dutch\",\n  \"Greek\",\n  \"Polish\",\n  \"Hungarian\",\n  \"Czech\",\n  \"Thai\",\n  \"Hebrew\",\n  \"Tamil\",\n  \"Telugu\",\n  \"Bengali\",\n];\n\nconst AdditionalDetailsForm = ({ data, onNext, onBack }: { data: any, onNext: any, onBack: any }) => {\n  const { control, formState: { errors }, trigger, getValues, setValue } = useForm({\n    resolver: zodResolver(schema),\n  });\n  const [castData, setCastData] = useState<any>([]);\n  const [crewData, setCrewData] = useState<any>([]);\n\n  React.useEffect(() => {\n    if (Object.keys(data).length !== 0) {\n      setValue('genres', data.genres);\n      setValue('favoriteCast', data.favoriteCast);\n      setValue('favoriteCrew', data.favoriteCrew);\n      setValue('preferredLanguages', data.preferredLanguages);\n    }\n\n    const fetchData = async () => {\n      try {\n        // const response = await fetch(\"http://localhost:8080/artist/all\");\n        const data = await getDataFromEndPoint(\"\", `artist/all`, \"GET\")\n        // if (!response.ok) {\n        //   throw new Error(`Error: ${response.status}`);\n        // }\n        // const data = await response.json();\n        setCrewData(data.Crew);\n        setCastData(data.Cast);\n        console.log(data);\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    };\n\n    fetchData();\n\n  }, []);\n\n  const getErrorMessage = (error: any) => {\n    return error && typeof error.message === 'string' ? error.message : '';\n  };\n\n  const prevStep = () => {\n    let data = getValues();\n    onBack(data, 'stepThreeData');\n  }\n\n  const onSubmit = () => {\n    trigger();\n    if (Object.keys(errors).length == 0) {\n      console.log(getValues());\n      let data = getValues();\n      onNext(data, 'stepThreeData');\n    }\n  };\n\n  return (\n    <form>\n      <Typography variant=\"h6\" gutterBottom>\n        Additional Details\n      </Typography>\n\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel htmlFor=\"genres\">Genres</InputLabel>\n        <Controller\n          name=\"genres\"\n          control={control}\n          defaultValue={[]}\n          render={({ field }) => (\n            <div>\n              <Select\n                multiple\n                value={field.value}\n                fullWidth\n                onChange={(e) => field.onChange(e.target.value)}\n                error={!!errors.genres}\n                label=\"Genres\"\n              >\n                {genres.map((genre) => (\n                  <MenuItem key={genre} value={genre}>\n                    {genre}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText error={!!errors.genres}>{getErrorMessage(errors.genres)}</FormHelperText>\n            </div>\n          )}\n        />\n      </FormControl>\n\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel htmlFor=\"favoriteCast\">Favorite Cast</InputLabel>\n        <Controller\n          name=\"favoriteCast\"\n          control={control}\n          defaultValue={[]}\n          render={({ field }) => (\n            <div>\n              <Select\n                multiple\n                value={field.value}\n                fullWidth\n                onChange={(e) => field.onChange(e.target.value)}\n                error={!!errors.favoriteCast}\n                label=\"Favorite Casr\"\n              >\n                {castData.map((cast: any) => (\n                  <MenuItem key={cast.id} value={cast.id}>\n                    {cast.name}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText error={!!errors.favoriteCast}>\n                {getErrorMessage(errors.favoriteCast)}\n              </FormHelperText>\n            </div>\n          )}\n        />\n      </FormControl>\n\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel htmlFor=\"favoriteCrew\">Favorite Crew</InputLabel>\n        <Controller\n          name=\"favoriteCrew\"\n          control={control}\n          defaultValue={[]}\n          render={({ field }) => (\n            <div>\n              <Select\n                multiple\n                value={field.value}\n                fullWidth\n                onChange={(e) => field.onChange(e.target.value)}\n                error={!!errors.favoriteCrew}\n                label=\"Favorite Crew\"\n              >\n                {crewData.map((crew: any) => (\n                  <MenuItem key={crew.id} value={crew.id}>\n                    {crew.name}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText error={!!errors.favoriteCrew}>\n                {getErrorMessage(errors.favoriteCrew)}\n              </FormHelperText>\n            </div>\n          )}\n        />\n      </FormControl>\n\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel htmlFor=\"preferredLanguages\">Preferred Languages</InputLabel>\n        <Controller\n          name=\"preferredLanguages\"\n          control={control}\n          defaultValue={[]}\n          render={({ field }) => (\n            <div>\n              <Select\n                multiple\n                value={field.value}\n                fullWidth\n                onChange={(e) => field.onChange(e.target.value)}\n                error={!!errors.preferredLanguages}\n                label=\"Preferred Languages\"\n              >\n                {languages.map((language) => (\n                  <MenuItem key={language} value={language}>\n                    {language}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText error={!!errors.preferredLanguages}>\n                {getErrorMessage(errors.preferredLanguages)}\n              </FormHelperText>\n            </div>\n          )}\n        />\n      </FormControl>\n\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Button\n          variant=\"outlined\"\n          sx={{ mt: 3, ml: 1 }}\n          onClick={prevStep}\n        >\n          Back\n        </Button>\n        <Button\n          variant=\"contained\"\n          sx={{ mt: 3, ml: 1 }}\n          onClick={onSubmit}\n        >\n          Sign In\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nexport default AdditionalDetailsForm;\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/AddressForm.tsx",["417"],[],"import * as React from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as zod from 'zod';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport PlacesAutocomplete, { geocodeByAddress } from 'react-places-autocomplete';\nimport { Box } from '@mui/system';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport { Button } from '@mui/material';\n\nconst schema = zod.object({\n  address1: zod.string().min(1, { message: \"Address1 is required\" }),\n  address2: zod.string().optional(),\n  city: zod.string().min(1, { message: \"City is required\" }),\n  state: zod.string().min(1, { message: \"State is required\" }),\n  country: zod.string().min(1, { message: \"Country is required\" }),\n  zipCode: zod.string().min(1, { message: \"Zip Code is required\" }),\n});\n\nexport default function AddressForm({ data, onNext, onBack }: { data: any, onNext: any, onBack: any }) {\n  const { register, trigger, control, formState: { errors }, setValue, getValues } = useForm({\n    resolver: zodResolver(schema)\n  });\n\n  React.useEffect(() => {\n    console.log(data);\n    if (Object.keys(data).length !== 0) {\n      setValue('address1', data.address1);\n      setValue('address2', data.address2);\n      setValue('city', data.city);\n      setValue('state', data.state);\n      setValue('country', data.country);\n      setValue('zipCode', data.zipCode);\n    }\n  }, [data]);\n\n  const [address, setAddress] = React.useState('');\n\n  const handleSelect = async (value: string) => {\n    const results = await geocodeByAddress(value);\n    const addressComponents = results[0].address_components;\n\n    const getAddressComponent = (type: string) => {\n      return addressComponents.find(component => component.types.includes(type))?.long_name || '';\n    };\n    // Format the address1 to include only specific parts (e.g., street name)\n    const street = getAddressComponent('route');\n    const streetNumber = getAddressComponent('street_number');\n    const formattedAddress1 = `${streetNumber} ${street}`;\n\n    setAddress(formattedAddress1); // Set the formatted address to state\n    setValue('address1', formattedAddress1); // Update address1 in the form\n    setValue('city', getAddressComponent('locality'));\n    setValue('state', getAddressComponent('administrative_area_level_1'));\n    setValue('country', getAddressComponent('country'));\n    setValue('zipCode', getAddressComponent('postal_code'));\n  };\n\n  const getErrorMessage = (error: any) => {\n    return error && typeof error.message === 'string' ? error.message : '';\n  };\n\n  const onSubmit = () => {\n    trigger();\n    if (Object.keys(errors).length == 0) {\n      console.log(getValues());\n      let data = getValues();\n      onNext(data, 'stepTwoData');\n    }\n  };\n\n  const prevStep = () =>{\n    let data = getValues();\n      onBack(data, 'stepTwoData');\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Address Details\n      </Typography>\n      <form >\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <PlacesAutocomplete value={address} onChange={setAddress} onSelect={handleSelect}>\n              {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                <Box>\n                  <TextField\n                    {...getInputProps({\n                      label: 'Address1',\n                    })}\n                    variant=\"standard\"\n                    fullWidth\n                    error={Boolean(errors.address1)}\n                    helperText={getErrorMessage(errors.address1)}\n                  />\n                  {loading && <div>Loading...</div>}\n                  <List sx={{ position: 'absolute', zIndex: 1, width: '100%' }}>\n                    {suggestions.map(suggestion => (\n                      <ListItem {...getSuggestionItemProps(suggestion)} sx={{ backgroundColor: suggestion.active ? '#b9d2fa' : '#ffffff', cursor: 'pointer' }} key={suggestion.placeId}>\n                        {suggestion.description}\n                      </ListItem>\n                    ))}\n                  </List>\n                </Box>\n              )}\n            </PlacesAutocomplete>\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              {...register(\"address2\")}\n              error={Boolean(errors.address2)}\n              helperText={getErrorMessage(errors.address2)}\n              id=\"address2\"\n              name=\"address2\"\n              label=\"Address line 2\"\n              fullWidth\n              variant=\"standard\"\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Controller\n              name=\"city\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  error={Boolean(errors.city)}\n                  helperText={getErrorMessage(errors.city)}\n                  id=\"city\"\n                  name=\"city\"\n                  label=\"City\"\n                  fullWidth\n                  variant=\"standard\"\n                  InputLabelProps={{\n                    shrink: Boolean(field.value),\n                  }}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Controller\n              name=\"state\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  error={Boolean(errors.state)}\n                  helperText={getErrorMessage(errors.state)}\n                  id=\"state\"\n                  name=\"state\"\n                  label=\"State/Province/Region\"\n                  fullWidth\n                  variant=\"standard\"\n                  InputLabelProps={{\n                    shrink: Boolean(field.value),\n                  }}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Controller\n              name=\"country\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  error={Boolean(errors.country)}\n                  helperText={getErrorMessage(errors.country)}\n                  id=\"country\"\n                  name=\"country\"\n                  label=\"Country\"\n                  fullWidth\n                  variant=\"standard\"\n                  InputLabelProps={{\n                    shrink: Boolean(field.value),\n                  }}\n                />\n              )}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Controller\n              name=\"zipCode\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  error={Boolean(errors.zipCode)}\n                  helperText={getErrorMessage(errors.zipCode)}\n                  id=\"zipCode\"\n                  name=\"zipCode\"\n                  label=\"Zip / Postal code\"\n                  fullWidth\n                  variant=\"standard\"\n                  InputLabelProps={{\n                    shrink: Boolean(field.value),\n                  }}\n                />\n              )}\n            />\n          </Grid>\n        </Grid>\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <Button\n            variant=\"outlined\"\n            sx={{ mt: 3, ml: 1 }}\n            onClick={prevStep}\n          >\n            Back\n          </Button>\n          <Button\n            variant=\"contained\"\n            sx={{ mt: 3, ml: 1 }}\n            onClick={onSubmit}\n          >\n            Next\n          </Button>\n        </Box>\n      </form>\n    </React.Fragment>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/PersonalDetailsForm.tsx",["418"],[],"import * as React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as zod from 'zod';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport Box from '@mui/material/Box';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n\nconst schema = zod.object({\n  email: zod.string().email({ message: \"Invalid email address\" }),\n  fullName: zod.string().min(1, { message: \"Full name is required\" }),\n  phoneNumber: zod.string().min(10, { message: \"Invalid phone number\" }),\n  dateOfBirth: zod.date(),\n  password: zod.string().min(6, { message: \"Password must be at least 6 characters\" }),\n  confirmPassword: zod.string(),\n  gender: zod.string().min(1, { message: \"Gender is required\" }),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\nexport default function PersonalDetailsForm({ data, onNext }: { data: any, onNext: any }) {\n  const [selectedFile, setSelectedFile] = React.useState(null);\n  const { register, control, formState: { errors }, getValues, trigger, setValue } = useForm({\n    resolver: zodResolver(schema)\n  });\n\n  React.useEffect(() => {\n    if (Object.keys(data).length !== 0) {\n      setValue('email', data.email);\n      setValue('fullName', data.fullName);\n      setValue('phoneNumber', data.phoneNumber);\n      setValue('dateOfBirth', data.dateOfBirth);\n      setValue('password', data.password);\n      setValue('gender', data.gender);\n      setValue('confirmPassword', data.confirmPassword);\n      setSelectedFile(data.selectedFile);\n    }\n  }, [data]);\n\n  const onSubmit = async () => {\n    await trigger();\n    if (Object.keys(errors).length == 0) {\n      let data = getValues();\n      data['selectedFile'] = selectedFile;\n      onNext(data, 'stepOneData');\n    }\n  };\n\n  const getErrorMessage = (error: any) => {\n    return error && typeof error.message === 'string' ? error.message : '';\n  };\n\n  const handleFileChange = (e: any) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      setSelectedFile(file);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Personal Details\n      </Typography>\n      <form>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <Avatar\n                sx={{ width: 100, height: 100 }}\n                src={selectedFile ? URL.createObjectURL(selectedFile) : \"/broken-image.jpg\"}\n              />\n            </Box>\n            <Box sx={{ display: \"flex\", justifyContent: \"center\", mt: 1 }}>\n              <Button\n                sx={{ width: 200 }}\n                component=\"label\"\n                variant=\"contained\"\n                startIcon={<CloudUploadIcon />}\n              >\n                Upload file\n                <input\n                  type=\"file\"\n                  hidden\n                  onChange={handleFileChange}\n                />\n              </Button>\n            </Box>\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              {...register(\"email\")}\n              error={Boolean(errors.email)}\n              helperText={getErrorMessage(errors.email)}\n              id=\"email\"\n              name=\"email\"\n              label=\"Email ID\"\n              fullWidth\n              variant=\"standard\"\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              {...register(\"fullName\")}\n              error={Boolean(errors.fullName)}\n              helperText={getErrorMessage(errors.fullName)}\n              id=\"fullName\"\n              name=\"fullName\"\n              label=\"Full Name\"\n              fullWidth\n              variant=\"standard\"\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              {...register(\"phoneNumber\")}\n              error={Boolean(errors.phoneNumber)}\n              helperText={getErrorMessage(errors.phoneNumber)}\n              id=\"phoneNumber\"\n              name=\"phoneNumber\"\n              label=\"Phone Number\"\n              fullWidth\n              variant=\"standard\"\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n              <Controller\n                name=\"dateOfBirth\"\n                control={control}\n                render={({ field }) => (\n                  <DatePicker\n                    label=\"Date of Birth\"\n                    {...field}\n                  />\n                )}\n              />\n            </LocalizationProvider>\n          </Grid>\n          <Grid item xs={3}>\n            <FormControl fullWidth>\n              <InputLabel id=\"gender-label\">Gender</InputLabel>\n              <Controller\n                name=\"gender\"\n                control={control}\n                defaultValue=\"\"\n                render={({ field }) => {\n                  console.log('Gender Controller Re-rendered');\n                  return (\n                    <Select\n                      {...field}\n                      labelId=\"gender-label\"\n                      label=\"Gender\"\n                      variant=\"standard\"\n                      error={Boolean(errors.gender)}\n                    >\n                      <MenuItem value=\"male\">Male</MenuItem>\n                      <MenuItem value=\"female\">Female</MenuItem>\n                      <MenuItem value=\"other\">Other</MenuItem>\n                    </Select>\n                  );\n                }}\n              />\n              <Typography variant=\"inherit\" color=\"textSecondary\">\n                {getErrorMessage(errors.gender)}\n              </Typography>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              {...register(\"password\")}\n              error={Boolean(errors.password)}\n              helperText={getErrorMessage(errors.password)}\n              id=\"password\"\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              fullWidth\n              variant=\"standard\"\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              {...register(\"confirmPassword\")}\n              error={Boolean(errors.confirmPassword)}\n              helperText={getErrorMessage(errors.confirmPassword)}\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              label=\"Confirm Password\"\n              type=\"password\"\n              fullWidth\n              variant=\"standard\"\n            />\n          </Grid>\n        </Grid>\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <Button\n            variant=\"contained\"\n            sx={{ mt: 3, ml: 1 }}\n            onClick={onSubmit}\n          >\n            Next\n          </Button>\n        </Box>\n      </form>\n    </React.Fragment>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup/page.tsx",["419"],[],"'use client'\nimport * as React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Toolbar from '@mui/material/Toolbar';\nimport Paper from '@mui/material/Paper';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport PersonalDetailsForm from './PersonalDetailsForm';\nimport AddressForm from './AddressForm';\nimport AdditionalDetailsForm from './AdditionalDetailsForm';\nimport Script from 'next/script';\nimport { getDataFromEndPoint } from '@/src/lib/backend-api';\nimport { useRouter } from 'next/navigation';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://mui.com/\">\n                Box Office\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst steps = ['Personal Details', 'Address', 'Additional Information'];\n\nexport default function Checkout() {\n    const [activeStep, setActiveStep] = React.useState(0);\n    const router = useRouter();\n\n    const [data, setData] = React.useState({\n        stepOneData: {},\n        stepTwoData: {},\n        stepThreeData: {},\n    });\n\n    function getStepContent(step: number) {\n        switch (step) {\n            case 0:\n                return <PersonalDetailsForm data={data.stepOneData} onNext={handleNext} />;\n            case 1:\n                return <AddressForm data={data.stepTwoData} onNext={handleNext} onBack={handleBack}/>;\n            case 2:\n                return <AdditionalDetailsForm data={data.stepThreeData} onNext={handleNext} onBack={handleBack}/>;\n            default:\n                throw new Error('Unknown step');\n        }\n    }\n\n    async function submitSignIn(){\n        const reqData = new FormData();\n        Object.entries(data).forEach(([stepDataKey,stepData])=>{\n            Object.entries(stepData).forEach(([key,value])=>{\n                if(key=='selectedFile'){\n                    reqData.append('file',value as string | Blob);\n                }else{\n                    if(Array.isArray(value)){\n                        reqData.append(key,(value as string[]).join(\", \"));\n                    }else{\n                        reqData.append(key, value as string);\n                    }\n                }\n            })\n        });\n\n        const response = await getDataFromEndPoint(reqData, 'user/signup' ,'POST');\n        if(response != null){\n            console.log('success');\n            router.push('/signin');\n        }\n    }\n\n    const handleNext = (stepData:any,stepIndex:string) => {\n        setData((prevData) => ({ ...prevData, [stepIndex]: stepData }));\n        if(activeStep == steps.length-1){\n            submitSignIn();\n            return;\n        }\n        setActiveStep(activeStep + 1);\n    };\n\n    const handleBack = (stepData:any,stepIndex:string) => {\n        setData((prevData) => ({ ...prevData, [stepIndex]: stepData }));\n        setActiveStep(activeStep - 1);\n    };\n\n    return (\n        <React.Fragment>\n            <Script\n                src={`https://maps.googleapis.com/maps/api/js?key=AIzaSyAH_4KikoUaqV41Fq09gBEsXzADYU1xM8w&libraries=places`}\n                strategy=\"beforeInteractive\"\n            />\n            <CssBaseline />\n            <AppBar\n                position=\"absolute\"\n                color=\"default\"\n                elevation={0}\n                sx={{\n                    position: 'relative',\n                    borderBottom: (t) => `1px solid ${t.palette.divider}`,\n                }}\n            >\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        Box Office\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container component=\"main\" maxWidth=\"lg\" sx={{ mb: 4 }}>\n                <Paper variant=\"outlined\" sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}>\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                        Sign Up\n                    </Typography>\n                    <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n                        {steps.map((label) => (\n                            <Step key={label}>\n                                <StepLabel>{label}</StepLabel>\n                            </Step>\n                        ))}\n                    </Stepper>\n                    {activeStep === steps.length ? (\n                        <React.Fragment>\n                            <Typography variant=\"h5\" gutterBottom>\n                                Success!!\n                            </Typography>\n                            <Typography variant=\"subtitle1\">\n                                LogIn to enjoy movies\n                            </Typography>\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            {getStepContent(activeStep)}\n                            <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                                {/* {activeStep !== 0 && (\n                                    <Button onClick={handleBack} sx={{ mt: 3, ml: 1 }}>\n                                        Back\n                                    </Button>\n                                )} */}\n                                {/* <Button\n                                    variant=\"contained\"\n                                    onClick={handleNext}\n                                    sx={{ mt: 3, ml: 1 }}\n                                >\n                                    {activeStep === steps.length - 1 ? 'Sign In' : 'Next'}\n                                </Button> */}\n                            </Box>\n                        </React.Fragment>\n                    )}\n                </Paper>\n                <Copyright />\n            </Container>\n        </React.Fragment>\n    );\n}","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/signup-original/page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/styles/theme/index.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/[theaterId]/addScreen/page.tsx",["420","421"],[],"\"use client\"\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as zod from 'zod';\n\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport { Box, Button, Container, CssBaseline, FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField, Typography } from \"@mui/material\";\nimport { Seats } from '@/src/lib/types'\nimport styles from './Customize.module.scss'\n\n\nconst schema = zod.object({\n    screenName: zod.string().min(1, 'Screen Name is required'),\n    timing: zod.array(zod.string()).min(1, 'Select at least one timing'),\n    format: zod.string().min(1, 'Format is required'),\n});\n\nconst screen =\n{\n    id: 5,\n    ticketCost: 200,\n    rows: 20,\n    cols: 6,\n    seats: {\n        A: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        B: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        C: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        D: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        E: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        F: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        G: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    }\n}\n\nexport default function AddScreen() {\n\n    const router = useRouter();\n    const [seatDetails, setSeatDetails] = useState<Seats>(screen?.seats || {});\n    const { theaterId } = useParams();\n    const [row, setRow] = useState<number>(screen?.rows || 0);\n    const [column, setColumn] = useState<number>(screen?.cols || 0);\n    const [editable, setEditable] = useState<boolean>(false);\n\n    useEffect(() => { clearSelectedSeats(); }, [])\n    useEffect(() => { handleSeatSubmit(); }, [row, column])\n\n    const handleSeatSubmit = () => {\n        let newSeatObject: Seats = {};\n        let key: string;\n        for (let i = 0; i < column; i++) {\n            if (i < 26) {\n                key = String.fromCharCode(65 + i)\n            } else {\n                let character = String.fromCharCode(64 + (i / 25));\n                key = `${character}${String.fromCharCode(64 + i % 25)}`;\n            }\n            newSeatObject[key] = Array(row).fill(0).map((_, i) => {\n                if (seatDetails && seatDetails[key] && seatDetails[key][i]) {\n                    return seatDetails[key][i];\n                } else {\n                    return 0;\n                }\n            });\n        }\n        console.log(seatDetails)\n        setSeatDetails(newSeatObject);\n    }\n\n    const clearSelectedSeats = () => {\n        let newMovieSeatDetails = { ...seatDetails };\n        for (let key in seatDetails) {\n            seatDetails[key].forEach((seatValue, seatIndex) => {\n                if (seatValue === 3) {\n                    seatDetails[key][seatIndex] = 0;\n                }\n            })\n        }\n        return newMovieSeatDetails;\n    }\n\n    const changeEditable = () => {\n        setEditable(!editable);\n    }\n\n    const onSeatClick = (seatValue: number, rowIndex: number, key: string) => {\n        if (seatDetails) {\n            if (seatValue === 1) {\n                return;\n            } else if (seatValue === 0) {\n                seatDetails[key][rowIndex] = 3;\n            } else {\n                seatDetails[key][rowIndex] = 0;\n            }\n        }\n        setSeatDetails({ ...seatDetails });\n    }\n\n    /**\n     * 0 - Not booked\n     * 1 - Booked\n     * 2 - Selected\n     * 3 - Blocked\n     */\n    const getClassNameForSeats = (seatValue: number) => {\n        let dynamicClass;\n        if (seatValue === 0) {  // Not booked\n            dynamicClass = styles.seatNotBooked;\n        } else if (seatValue === 1) {  // booked\n            dynamicClass = styles.seatBooked;\n        } else if (seatValue === 2) {  // Seat Selected\n            dynamicClass = styles.seatSelected;\n        } else {  // Seat Blocked\n            dynamicClass = styles.seatBlocked;\n        }\n        return `${styles.seats} ${dynamicClass}`\n    }\n\n    const RenderFormatedSeats = () => {\n        let seatArray = [];\n        for (let key in seatDetails) {\n            let index = 0;\n            let colValue = seatDetails[key].map((seatValue, rowIndex) => (\n                <span key={`${key}.${rowIndex}`} className={styles.seatsHolder}>\n                    {rowIndex === 0 && <span className={styles.colName}>{key}</span>}\n                    {seatValue !== 3 ? <span className={getClassNameForSeats(seatValue)}>\n                        {index = index + 1}\n                    </span> :\n                        <span className={getClassNameForSeats(1)}>\n                            {rowIndex + 1}\n                        </span>\n                    }\n                    {seatDetails && rowIndex === seatDetails[key].length - 1 && <><br /><br /></>}\n                </span>\n            ))\n            seatArray.push(colValue);\n        }\n        return (\n            <div className={styles.seatsLeafContainer}>{seatArray}</div>\n        )\n    }\n\n    const RenderSeats = () => {\n        let seatArray = [];\n        for (let key in seatDetails) {\n            let colValue = seatDetails[key].map((seatValue, rowIndex) => (\n                <span key={`${key}.${rowIndex}`} className={styles.seatsHolder}>\n                    {rowIndex === 0 && <span className={styles.colName}>{key}</span>}\n                    <span className={getClassNameForSeats(seatValue)} onClick={() => onSeatClick(seatValue, rowIndex, key)}>\n                        {rowIndex + 1}\n                    </span>\n                    {seatDetails && rowIndex === seatDetails[key].length - 1 && <><br /><br /></>}\n                </span>\n            ))\n            seatArray.push(colValue);\n        }\n        return (\n            <div className={styles.seatsLeafContainer}>{seatArray}</div>\n        )\n    }\n\n    const { handleSubmit, control, formState: { errors } } = useForm({\n        resolver: zodResolver(schema)\n    });\n\n    const getErrorMessage = (error: any) => {\n        return error && typeof error.message === 'string' ? error.message : '';\n    };\n\n    async function onSubmit(data: any) {\n        router.push(\"/theater/\" + theaterId + \"/screens/\");\n        data['rows'] = row;\n        data['col'] = column;\n        data['seats'] = seatDetails;\n        data['theater_id'] = theaterId;\n        const formUrl = 'screen/addScreen';\n        console.log(formUrl);\n        try {\n            await getDataFromEndPoint(data, formUrl, 'POST');\n\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <Container maxWidth=\"xl\" style={{ marginLeft: \"0px\", marginRight: \"0px\", marginTop: \"6%\" }}>\n                <form action='/screen/addScreen' onSubmit={handleSubmit(onSubmit)}>\n                    <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <Typography variant=\"h4\">Add New Screen</Typography>\n                    </Box>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={12} lg={4}>\n                            <Controller\n                                name=\"screenName\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => <TextField {...field} label=\"Screen Name\" error={!!errors.screenName} helperText={getErrorMessage(errors.screenName)} fullWidth margin=\"normal\" />}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={12} lg={4}>\n                            <Controller\n                                name=\"timing\"\n                                control={control}\n                                defaultValue={[]}\n                                render={({ field }) => (\n                                    <FormControl fullWidth margin=\"normal\" error={!!errors.timing}>\n                                        <InputLabel>Timing</InputLabel>\n                                        <Select {...field} multiple label=\"Timing\">\n                                            {['9:00 am', '1:00 pm', '6:00 pm', '10:00 pm'].map((time) => (\n                                                <MenuItem key={time} value={time}>{time}</MenuItem>\n                                            ))}\n                                        </Select>\n                                        <FormHelperText id=\"component-error-text\">{getErrorMessage(errors.timing)}</FormHelperText>\n                                    </FormControl>\n                                )}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={12} lg={4}>\n                            <Controller\n                                name=\"format\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => (\n                                    <FormControl fullWidth margin=\"normal\" error={!!errors.format}>\n                                        <InputLabel>Format</InputLabel>\n                                        <Select {...field} label=\"Format\">\n                                            {['2D', '3D'].map((format) => (\n                                                <MenuItem key={format} value={format}>{format}</MenuItem>\n                                            ))}\n                                        </Select>\n                                        <FormHelperText id=\"component-error-text\">{getErrorMessage(errors.format)}</FormHelperText>\n                                    </FormControl>\n                                )}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n                        <Grid item xs={12} lg={12}>\n                            <Grid container justifyContent=\"center\" spacing={2}>\n                                <Grid item xs={12} md={12} lg={4}>\n                                    <TextField\n                                        disabled={!editable}\n                                        InputProps={{ inputProps: { min: 5, max: 25 } }}\n                                        value={row}\n                                        onChange={(e) => setRow(parseInt(e.target.value) || 0)}\n                                        type=\"number\"\n                                        label=\"Rows\"\n                                        error={!!errors.rows}\n                                        helperText={getErrorMessage(errors.rows)}\n                                        fullWidth />\n                                </Grid>\n                                <Grid item xs={12} md={12} lg={4}>\n                                    <TextField\n                                        disabled={!editable}\n                                        InputProps={{ inputProps: { min: 5, max: 12 } }}\n                                        value={column}\n                                        onChange={(e) => setColumn(parseInt(e.target.value) || 0)}\n                                        type=\"number\"\n                                        label=\"Columns\"\n                                        error={!!errors.columns}\n                                        helperText={getErrorMessage(errors.columns)}\n                                        fullWidth />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n                        <Grid item xs={12} lg={12}>\n                            <Grid container justifyContent=\"center\" spacing={2}>\n\n                                {editable ?\n                                    <Box gap={2} my={4}>\n                                        <Button variant=\"contained\" onClick={changeEditable}>Show Preview</Button>\n                                        <Button variant=\"outlined\" onClick={clearSelectedSeats}>Reset Layout</Button>\n                                    </Box>\n                                    : <Box gap={2} my={4}>\n                                        <Button style={{ marginRight: \"5px\" }} variant=\"outlined\" onClick={changeEditable}>Edit Layout</Button>\n                                        <Button variant=\"contained\" type=\"submit\">Submit</Button>\n                                    </Box>}\n                                {/* <Button variant=\"outlined\" onClick={changeEditable}>Edit Layout</Button> */}\n\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </form>\n                <>\n                    <div className={styles.seatsContainer}>\n                        <p className={styles.header}>Select Seats to be <b className={styles.headerBlockedText}>Removed</b></p>\n                        {seatDetails && editable && <RenderSeats />}\n                        {seatDetails && !editable && <RenderFormatedSeats />}\n                        <div className={styles.cont_screen}>\n                            <div className={styles.screen}>\n                                <span className={styles.screen_text}>SCREEN</span>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            </Container>\n        </React.Fragment>\n    )\n\n}","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/[theaterId]/editScreen/page.tsx",["422"],[],"\"use client\"\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as zod from 'zod';\n\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport { Box, Button, Container, CssBaseline, FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField, Typography } from \"@mui/material\";\nimport { Seats } from '@/src/lib/types'\nimport styles from './../addScreen/Customize.module.scss'\n\n\nconst schema = zod.object({\n    screenName: zod.string().min(1, 'Screen Name is required'),\n    timing: zod.array(zod.string()).min(1, 'Select at least one timing'),\n    format: zod.string().min(1, 'Format is required'),\n});\n\nconst screen =\n{\n    id: 5,\n    ticketCost: 200,\n    rows: 20,\n    cols: 6,\n    seats: {\n        A: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        B: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        C: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        D: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        E: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        F: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        G: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    }\n}\n\nexport default function EditScreen() {\n\n    const router = useRouter();\n    const [screenDetails, setScreenDetails] = useState<any>({});\n    const [seatDetails, setSeatDetails] = useState<Seats>(screen?.seats || {});\n    const { theaterId } = useParams();\n    const [row, setRow] = useState<number>(screen?.rows || 0);\n    const [column, setColumn] = useState<number>(screen?.cols || 0);\n    const [editable, setEditable] = useState<boolean>(false);\n\n    useEffect(() => {\n        clearSelectedSeats();\n        if (localStorage.getItem('screenDetails') != null) {\n            let data = localStorage.getItem('screenDetails');\n            if (data == null) data = \"\";\n            else {\n                const details = JSON.parse(data);\n                setValue('screenName', details.name);\n                setValue('format', details.format);\n                setValue('timing', details.timings);\n                setScreenDetails(details);\n                setSeatDetails(details.seatDetails);\n                setRow(details.rows);\n                setColumn(details.columns);\n            }\n        }\n    }, [])\n\n    const clearSelectedSeats = () => {\n        let newMovieSeatDetails = { ...seatDetails };\n        for (let key in seatDetails) {\n            seatDetails[key].forEach((seatValue, seatIndex) => {\n                if (seatValue === 3) {\n                    seatDetails[key][seatIndex] = 0;\n                }\n            })\n        }\n        setSeatDetails({ ...seatDetails });\n        return newMovieSeatDetails;\n    }\n\n    const changeEditable = () => {\n        setEditable(!editable);\n    }\n\n    const onSeatClick = (seatValue: number, rowIndex: number, key: string) => {\n        if (seatDetails) {\n            if (seatValue === 1) {\n                return;\n            } else if (seatValue === 0) {\n                seatDetails[key][rowIndex] = 3;\n            } else {\n                seatDetails[key][rowIndex] = 0;\n            }\n        }\n        setSeatDetails({ ...seatDetails });\n    }\n\n    /**\n     * 0 - Not booked\n     * 1 - Booked\n     * 2 - Selected\n     * 3 - Blocked\n     */\n    const getClassNameForSeats = (seatValue: number) => {\n        let dynamicClass;\n        if (seatValue === 0) {  // Not booked\n            dynamicClass = styles.seatNotBooked;\n        } else if (seatValue === 1) {  // booked\n            dynamicClass = styles.seatBooked;\n        } else if (seatValue === 2) {  // Seat Selected\n            dynamicClass = styles.seatSelected;\n        } else {  // Seat Blocked\n            dynamicClass = styles.seatBlocked;\n        }\n        return `${styles.seats} ${dynamicClass}`\n    }\n\n    const RenderFormatedSeats = () => {\n        let seatArray = [];\n        for (let key in seatDetails) {\n            let index = 0;\n            let colValue = seatDetails[key].map((seatValue, rowIndex) => (\n                <span key={`${key}.${rowIndex}`} className={styles.seatsHolder}>\n                    {rowIndex === 0 && <span className={styles.colName}>{key}</span>}\n                    {seatValue !== 3 ? <span className={getClassNameForSeats(seatValue)}>\n                        {index = index + 1}\n                    </span> :\n                        <span className={getClassNameForSeats(1)}>\n                            {rowIndex + 1}\n                        </span>\n                    }\n                    {seatDetails && rowIndex === seatDetails[key].length - 1 && <><br /><br /></>}\n                </span>\n            ))\n            seatArray.push(colValue);\n        }\n        return (\n            <div className={styles.seatsLeafContainer}>{seatArray}</div>\n        )\n    }\n\n    const RenderSeats = () => {\n        let seatArray = [];\n        for (let key in seatDetails) {\n            let colValue = seatDetails[key].map((seatValue, rowIndex) => (\n                <span key={`${key}.${rowIndex}`} className={styles.seatsHolder}>\n                    {rowIndex === 0 && <span className={styles.colName}>{key}</span>}\n                    <span className={getClassNameForSeats(seatValue)} onClick={() => onSeatClick(seatValue, rowIndex, key)}>\n                        {rowIndex + 1}\n                    </span>\n                    {seatDetails && rowIndex === seatDetails[key].length - 1 && <><br /><br /></>}\n                </span>\n            ))\n            seatArray.push(colValue);\n        }\n        return (\n            <div className={styles.seatsLeafContainer}>{seatArray}</div>\n        )\n    }\n\n    const { handleSubmit, control, formState: { errors }, setValue } = useForm({\n        resolver: zodResolver(schema)\n    });\n\n    const getErrorMessage = (error: any) => {\n        return error && typeof error.message === 'string' ? error.message : '';\n    };\n\n    async function onSubmit(data: any) {\n        data['rows'] = row;\n        data['col'] = column;\n        data['seats'] = seatDetails;\n        data['theater_id'] = theaterId;\n        data['id'] = screenDetails.id;\n        const formUrl = 'screen/updateScreen';\n        console.log(formUrl);\n        try {\n            await getDataFromEndPoint(data, formUrl, 'POST');\n            router.push(\"/theater/\" + theaterId + \"/screens\");\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <Container maxWidth=\"xl\" style={{ marginLeft: \"0px\", marginRight: \"0px\", marginTop: \"6%\" }}>\n                <form action='/screen/addScreen' onSubmit={handleSubmit(onSubmit)}>\n                    <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n                        <Typography variant=\"h4\">Edit Screen</Typography>\n                    </Box>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12} md={12} lg={4}>\n                            <Controller\n                                name=\"screenName\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => <TextField {...field} label=\"Screen Name\" error={!!errors.screenName} helperText={getErrorMessage(errors.screenName)} fullWidth margin=\"normal\" />}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={12} lg={4}>\n                            <Controller\n                                name=\"timing\"\n                                control={control}\n                                defaultValue={[]}\n                                render={({ field }) => (\n                                    <FormControl fullWidth margin=\"normal\" error={!!errors.timing}>\n                                        <InputLabel>Timing</InputLabel>\n                                        <Select {...field} multiple label=\"Timing\">\n                                            {['9:00 am', '1:00 pm', '6:00 pm', '10:00 pm'].map((time) => (\n                                                <MenuItem key={time} value={time}>{time}</MenuItem>\n                                            ))}\n                                        </Select>\n                                        <FormHelperText id=\"component-error-text\">{getErrorMessage(errors.timing)}</FormHelperText>\n                                    </FormControl>\n                                )}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={12} lg={4}>\n                            <Controller\n                                name=\"format\"\n                                control={control}\n                                defaultValue=\"\"\n                                render={({ field }) => (\n                                    <FormControl fullWidth margin=\"normal\" error={!!errors.format}>\n                                        <InputLabel>Format</InputLabel>\n                                        <Select {...field} label=\"Format\">\n                                            {['2D', '3D'].map((format) => (\n                                                <MenuItem key={format} value={format}>{format}</MenuItem>\n                                            ))}\n                                        </Select>\n                                        <FormHelperText id=\"component-error-text\">{getErrorMessage(errors.format)}</FormHelperText>\n                                    </FormControl>\n                                )}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n                        <Grid item xs={12} lg={12}>\n                            <Grid container justifyContent=\"center\" spacing={2}>\n                                <Grid item xs={12} md={12} lg={4}>\n                                    <TextField\n                                        disabled={!editable}\n                                        InputProps={{ inputProps: { min: 5, max: 25 } }}\n                                        value={row}\n                                        onChange={(e) => setRow(parseInt(e.target.value) || 0)}\n                                        type=\"number\"\n                                        label=\"Rows\"\n                                        error={!!errors.rows}\n                                        helperText={getErrorMessage(errors.rows)}\n                                        fullWidth />\n                                </Grid>\n                                <Grid item xs={12} md={12} lg={4}>\n                                    <TextField\n                                        disabled={!editable}\n                                        InputProps={{ inputProps: { min: 5, max: 12 } }}\n                                        value={column}\n                                        onChange={(e) => setColumn(parseInt(e.target.value) || 0)}\n                                        type=\"number\"\n                                        label=\"Columns\"\n                                        error={!!errors.columns}\n                                        helperText={getErrorMessage(errors.columns)}\n                                        fullWidth />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid sx={{ flexGrow: 1 }} container spacing={2}>\n                        <Grid item xs={12} lg={12}>\n                            <Grid container justifyContent=\"center\" spacing={2}>\n\n                                {editable ?\n                                    <Box gap={2} my={4}>\n                                        <Button variant=\"contained\" onClick={changeEditable} sx={{ mr: 2 }}>Show Preview</Button>\n                                        <Button variant=\"outlined\" onClick={clearSelectedSeats}>Reset Layout</Button>\n                                    </Box>\n                                    : <Box gap={2} my={4}>\n                                        <Button style={{ marginRight: \"5px\" }} variant=\"outlined\" onClick={changeEditable}>Edit Layout</Button>\n                                        <Button variant=\"contained\" type=\"submit\">Update</Button>\n                                    </Box>}\n                                {/* <Button variant=\"outlined\" onClick={changeEditable}>Edit Layout</Button> */}\n\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </form>\n                <>\n                    <div className={styles.seatsContainer}>\n                        <p className={styles.header}>Select Seats to be <b className={styles.headerBlockedText}>Removed</b></p>\n                        {seatDetails && editable && <RenderSeats />}\n                        {seatDetails && !editable && <RenderFormatedSeats />}\n                        <div className={styles.cont_screen}>\n                            <div className={styles.screen}>\n                                <span className={styles.screen_text}>SCREEN</span>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            </Container>\n        </React.Fragment>\n    )\n\n}","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/[theaterId]/screens/page.tsx",["423","424"],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/theater/page.tsx",["425"],[],"\"use client\";\nimport { getDataFromEndPoint } from \"@/src/lib/backend-api\";\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport Container from \"@mui/material/Container\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {\n  Box,\n  Grid,\n  Typography,\n  Button,\n  Link,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport Modal from \"@mui/material/Modal\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport Fade from \"@mui/material/Fade\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { styled } from \"@mui/material/styles\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as zod from \"zod\";\nimport useStore from \"@/src/store\";\nimport EmailIcon from \"@mui/icons-material/Email\";\nimport PhoneIcon from \"@mui/icons-material/Phone\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst schema = zod.object({\n  theater_name: zod.string().min(1, \"Screen Name is required\"),\n  description: zod\n    .string()\n    .min(1, \"description is required\")\n    .max(350, \"Must be under 350 chareceters\"),\n  city: zod.string().min(1, \"city is required\"),\n  location_url: zod\n    .string()\n    .min(1, \"locationUrl is required\")\n    .url(\"Invalid Url\"),\n  address: zod.string().min(1, \"address is required\"),\n  zipcode: zod.string().refine((value) => /^\\d{5}$/.test(value), {\n    message: \"Invalid ZipCode number. Must be 5 digits.\",\n  }),\n  email: zod.string().min(1, \"Email is required\").email(\"Email is invalid\"),\n  // phno: zod.number().min(1, 'Phone Number is required').max(10, 'Phone number should have only 10 digits'),\n  phno: zod.string().refine((value) => /^\\d{10}$/.test(value), {\n    message: \"Invalid phone number. Must be 10 digits.\",\n  }),\n  state: zod.string().min(1, \"state is required\"),\n});\n\ninterface Theater {\n  name: string;\n  description: string;\n  locationUrl: string;\n  address: string;\n  screenDetails: string[];\n  imageUrl: string;\n  nScreens: number;\n  email: string;\n  phoneNumber: string;\n  id: string;\n}\n\n// const theaters: Theater[] = [\n//     {\n//         name: \"cinemark\",\n//         description: \"new Theater\",\n//         locationUrl: \"someurl\",\n//         address: \"some address\",\n//         screenDetails: [\"screen1\", \"screen2\"],\n//         imageUrl: \"https://lumiere-a.akamaihd.net/v1/images/p_avengersendgame_19751_e14a0104.jpeg?region=0%2C0%2C540%2C810\", // Dummy image URL for a larger movie poster\n//         nScreens: 2,\n//         email: \"cinemark@gmail.com\",\n//         phoneNumber: \"1234567890\",\n//     },\n//     {\n//         name: \"cinemark\",\n//         description: \"new Theater\",\n//         locationUrl: \"someurl\",\n//         address: \"some address\",\n//         screenDetails: [\"screen1\", \"screen2\"],\n//         imageUrl: \"https://lumiere-a.akamaihd.net/v1/images/p_avengersendgame_19751_e14a0104.jpeg?region=0%2C0%2C540%2C810\", // Dummy image URL for a larger movie poster\n//         nScreens: 2,\n//         email: \"cinemark@gmail.com\",\n//         phoneNumber: \"1234567890\",\n//     },\n//     {\n//         name: \"cinemark\",\n//         description: \"new Theater\",\n//         locationUrl: \"someurl\",\n//         address: \"some address\",\n//         screenDetails: [\"screen1\", \"screen2\"],\n//         imageUrl: \"https://lumiere-a.akamaihd.net/v1/images/p_avengersendgame_19751_e14a0104.jpeg?region=0%2C0%2C540%2C810\", // Dummy image URL for a larger movie poster\n//         nScreens: 2,\n//         email: \"cinemark@gmail.com\",\n//         phoneNumber: \"1234567890\",\n//     },\n//     {\n//         name: \"cinemark\",\n//         description: \"new Theater\",\n//         locationUrl: \"someurl\",\n//         address: \"some address\",\n//         screenDetails: [\"screen1\", \"screen2\"],\n//         imageUrl: \"https://lumiere-a.akamaihd.net/v1/images/p_avengersendgame_19751_e14a0104.jpeg?region=0%2C0%2C540%2C810\", // Dummy image URL for a larger movie poster\n//         nScreens: 2,\n//         email: \"cinemark@gmail.com\",\n//         phoneNumber: \"1234567890\",\n//     },\n//     {\n//         name: \"cinemark\",\n//         description: \"new Theater\",\n//         locationUrl: \"someurl\",\n//         address: \"some address\",\n//         screenDetails: [\"screen1\", \"screen2\"],\n//         imageUrl: \"https://lumiere-a.akamaihd.net/v1/images/p_avengersendgame_19751_e14a0104.jpeg?region=0%2C0%2C540%2C810\", // Dummy image URL for a larger movie poster\n//         nScreens: 2,\n//         email: \"cinemark@gmail.com\",\n//         phoneNumber: \"1234567890\",\n//     },\n//     {\n//         name: \"cinemark\",\n//         description: \"new Theater\",\n//         locationUrl: \"someurl\",\n//         address: \"some address\",\n//         screenDetails: [\"screen1\", \"screen2\"],\n//         imageUrl: \"https://lumiere-a.akamaihd.net/v1/images/p_avengersendgame_19751_e14a0104.jpeg?region=0%2C0%2C540%2C810\", // Dummy image URL for a larger movie poster\n//         nScreens: 2,\n//         email: \"cinemark@gmail.com\",\n//         phoneNumber: \"1234567890\",\n//     },\n//     {\n//         name: \"cinemark\",\n//         description: \"new Theater\",\n//         locationUrl: \"someurl\",\n//         address: \"some address\",\n//         screenDetails: [\"screen1\", \"screen2\"],\n//         imageUrl: \"https://lumiere-a.akamaihd.net/v1/images/p_avengersendgame_19751_e14a0104.jpeg?region=0%2C0%2C540%2C810\", // Dummy image URL for a larger movie poster\n//         nScreens: 2,\n//         email: \"cinemark@gmail.com\",\n//         phoneNumber: \"1234567890\",\n//     },\n// ];\n\nexport default function Theater() {\n  const style = {\n    position: \"absolute\" as \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 400,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n  const VisuallyHiddenInput = styled(\"input\")({\n    clip: \"rect(0 0 0 0)\",\n    clipPath: \"inset(50%)\",\n    height: 1,\n    overflow: \"hidden\",\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    whiteSpace: \"nowrap\",\n    width: 1,\n    accept: \"image/*\",\n  });\n  const store: any = useStore();\n  const router = useRouter();\n  const [theaterData, setTheaterData] = useState<Theater[]>([]);\n  const [formSuccess, setFormSuccess] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [enableEdit, setEnableEdit] = useState<boolean>(false);\n  const [theaterId, setTheaterId] = useState<string>(\"\");\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [isFile, setIsFile] = React.useState<boolean>(false);\n  const isAdmin = store.isAdmin; // Replace with the actual way to get this info\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm({ resolver: zodResolver(schema) });\n\n  const getErrorMessage = (error: any) => {\n    return error && typeof error.message === \"string\" ? error.message : \"\";\n  };\n  const handleClose = () => {\n    setOpen(false);\n    if (enableEdit) {\n      setEnableEdit(false);\n      setTheaterId(\"\");\n    }\n  };\n\n  const handleFileChange = (e: any) => {\n    e.preventDefault();\n    setIsFile(true);\n    const file = e.target.files[0];\n    setSelectedFile(file);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await getDataFromEndPoint(\"\", \"theater/all\", \"GET\");\n      const data = response.data;\n      const mappedData: Theater[] = data.map((theaterItem: any) => ({\n        name: theaterItem.name,\n        description: theaterItem.description,\n        locationUrl: theaterItem.theater_url,\n        address: theaterItem.state,\n        city: theaterItem.city,\n        state: theaterItem.state,\n        zipcode: theaterItem.zipcode,\n        screenDetails: theaterItem.screen_ids,\n        imageUrl: theaterItem.image_url,\n        nScreens: theaterItem.screen_ids.length,\n        email: theaterItem.mail, // Replace with actual email property from your data\n        phoneNumber: theaterItem.mobile,\n        id: theaterItem.id, // Assuming mobile is a number\n      }));\n      setTheaterData(mappedData);\n    };\n\n    fetchData();\n  }, []);\n\n  const getTheaters = async () => {\n    const response = await getDataFromEndPoint(\"\", \"theater/all\", \"GET\");\n    const data = response.data;\n    const mappedData: Theater[] = data.map((theaterItem: any) => ({\n      name: theaterItem.name,\n      description: theaterItem.description,\n      locationUrl: theaterItem.theater_url,\n      address: theaterItem.state,\n      city: theaterItem.city,\n      state: theaterItem.state,\n      zipcode: theaterItem.zipcode,\n      screenDetails: theaterItem.screen_ids,\n      imageUrl: theaterItem.image_url,\n      nScreens: theaterItem.screen_ids.length,\n      email: theaterItem.mail,\n      phoneNumber: theaterItem.mobile,\n      id: theaterItem.id,\n    }));\n    setTheaterData(mappedData);\n  };\n\n  const updateTheater = async (e: any) => {\n    try {\n      const formURL = \"theater/updateTheater\";\n      const data = new FormData();\n      if (selectedFile) {\n        data.append(\"file\", selectedFile);\n      }\n      e[\"id\"] = theaterId;\n      data.append(\"data\", JSON.stringify(e));\n      await getDataFromEndPoint(data, formURL, \"POST\");\n      setOpen(false);\n      setEnableEdit(false);\n      setTheaterId(\"\");\n      getTheaters();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSubmit = async (e: any) => {\n    if (enableEdit) {\n      updateTheater(e);\n      return;\n    }\n    if (selectedFile) {\n      const formURL = \"theater/add\";\n      const data = new FormData();\n      data.append(\"file\", selectedFile);\n      data.append(\"data\", JSON.stringify(e));\n      const get_data = await getDataFromEndPoint(data, formURL, \"POST\");\n      if (get_data.status === 200) {\n        getTheaters();\n      }\n      setOpen(false);\n      setIsFile(false);\n    }\n  };\n\n  async function deleteTheater(theaterId: any) {\n    const formURL = \"theater/deleteTheater\";\n    const data = { id: theaterId };\n    const resp = await getDataFromEndPoint(data, formURL, \"POST\");\n    if (resp != null) {\n      getTheaters();\n    }\n  }\n\n  function editTheater(theater: any) {\n    setValue(\"theater_name\", theater.name);\n    setValue(\"description\", theater.description);\n    setValue(\"location_url\", theater.locationUrl);\n    setValue(\"city\", theater.city);\n    setValue(\"state\", theater.state);\n    setValue(\"address\", theater.address);\n    setValue(\"zipcode\", theater.zipcode.toString());\n    setValue(\"email\", theater.email);\n    setValue(\"phno\", theater.phoneNumber.toString());\n    setOpen(true);\n    setEnableEdit(true);\n    setTheaterId(theater.id);\n  }\n\n  const addScreen = (theaterId: any) => {\n    router.push(\"/theater/\" + theaterId + \"/screens/\");\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Grid container sx={{ mt: 5 }} spacing={2}>\n        <Grid container sx={{ justifyContent: \"space-between\" }}>\n          <Typography variant=\"h4\">Theaters</Typography>\n          {isAdmin && (\n            <Button\n              variant=\"contained\"\n              startIcon={<AddCircleOutlineIcon />}\n              onClick={() => setOpen(true)}\n            >\n              Add Theater\n            </Button>\n          )}\n        </Grid>\n        <Grid item xs={12} container>\n          <Grid container spacing={2} alignItems=\"center\" justifyContent=\"left\">\n            {theaterData.map((theater, index) => (\n              <Grid item xs={12} md={6} lg={6} key={index}>\n                <Box\n                  sx={{\n                    bgcolor: \"white\",\n                    p: 3,\n                    borderRadius: 2,\n                    boxShadow: 3,\n                    display: \"flex\",\n                    flexDirection: { xs: \"column\", md: \"row\" },\n                    alignItems: \"center\",\n                  }}\n                >\n                  <img\n                    src={theater.imageUrl}\n                    alt=\"Theater\"\n                    style={{\n                      marginBottom: 16,\n                      marginRight: 24,\n                      width: 192,\n                      borderRadius: 8,\n                    }}\n                  />\n                  <Box sx={{ flex: 1 }}>\n                    <Grid\n                      container\n                      justifyContent=\"space-between\"\n                      alignItems=\"center\"\n                      sx={{ mb: 3 }}\n                    >\n                      <Link\n                        href={theater.locationUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        underline=\"hover\"\n                        style={{ textDecoration: \"none\" }}\n                      >\n                        <Typography\n                          variant=\"h6\"\n                          component=\"h3\"\n                          sx={{\n                            mb: 1,\n                            fontWeight: \"medium\",\n                            fontSize: \"2rem\",\n                            color: \"#01579B\",\n                          }}\n                        >\n                          {theater.name}\n                        </Typography>\n                      </Link>\n                      {isAdmin && (\n                        <>\n                          <Button\n                            startIcon={<EditIcon />}\n                            onClick={() => {\n                              editTheater(theater);\n                            }}\n                          />\n                          <Button\n                            startIcon={<DeleteIcon />}\n                            onClick={() => {\n                              deleteTheater(theater.id);\n                            }}\n                          />\n                        </>\n                      )}\n                    </Grid>\n                    <Button\n                      variant=\"outlined\"\n                      sx={{ mb: 2 }}\n                      onClick={() => addScreen(theater.id)}\n                    >\n                      Show Screens\n                    </Button>\n                    <Typography\n                      variant=\"body2\"\n                      sx={{ ml: \"10px\", fontSize: \"1rem\" }}\n                    >\n                      {theater.description}\n                    </Typography>\n                    <Box\n                      sx={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"flex-start\",\n                        fontSize: \"0.875rem\",\n                        color: \"text.secondary\",\n                        mt: 2,\n                      }}\n                    >\n                      <Box\n                        sx={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          // backgroundColor: \"#f5f5f5\",\n                          borderRadius: \"8px\",\n                          padding: \"8px 16px\",\n                          maxWidth: \"fit-content\",\n                          // boxShadow: \"0 2px 4px rgba(0,0,0,0.2)\",\n                          \"&:hover\": {\n                            backgroundColor: \"#e0e0e0\",\n                          },\n                        }}\n                      >\n                        <EmailIcon\n                          sx={{ marginRight: \"8px\", color: \"#0077b5\" }}\n                        />\n                        <Typography variant=\"body1\">\n                          <Link\n                            href={`mailto:${theater.email}`}\n                            underline=\"none\"\n                            sx={{ color: \"#0077b5\", fontWeight: \"bold\" }}\n                          >\n                            {theater.email}\n                          </Link>\n                        </Typography>\n                      </Box>\n                      <Box\n                        sx={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          mt: 1,\n                          // backgroundColor: \"#f5f5f5\",\n                          borderRadius: \"8px\",\n                          padding: \"8px 16px\",\n                          maxWidth: \"fit-content\",\n                          // boxShadow: \"0 2px 4px rgba(0,0,0,0.2)\",\n                          \"&:hover\": {\n                            backgroundColor: \"#e0e0e0\",\n                          },\n                        }}\n                      >\n                        <PhoneIcon\n                          sx={{ marginRight: \"8px\", color: \"#0077b5\" }}\n                        />\n                        <Typography\n                          variant=\"body1\"\n                          sx={{ color: \"#333\", fontWeight: \"bold\" }}\n                        >\n                          {theater.phoneNumber}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Box>\n                </Box>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        slots={{ backdrop: Backdrop }}\n        slotProps={{\n          backdrop: {\n            timeout: 500,\n          },\n        }}\n      >\n        <Fade in={open}>\n          <Box\n            sx={{\n              ...style, // Your existing styles\n              display: \"flex\", // Ensures flexbox layout\n              justifyContent: \"center\", // Centers horizontally\n              alignItems: \"center\", // Centers vertically\n              // Full width of the parent\n              width: \"600px\",\n              maxWidth: \"1000px\",\n            }}\n          >\n            <Stack direction=\"column\" spacing={2}>\n              {formSuccess ? \"successs\" : \"\"}\n              <form\n                encType=\"multipart/form-data\"\n                action=\"/Theater/addtheater\"\n                onSubmit={handleSubmit(onSubmit)}\n              >\n                <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <Button\n                    sx={{ width: 200 }}\n                    component=\"label\"\n                    variant=\"contained\"\n                    startIcon={<CloudUploadIcon />}\n                  >\n                    {selectedFile ? (\n                      <>\n                        File Uploaded <CheckCircleOutlineIcon sx={{ ml: 1 }} />\n                      </>\n                    ) : (\n                      \"Upload Image\"\n                    )}\n                    <VisuallyHiddenInput\n                      type=\"file\"\n                      onChange={handleFileChange}\n                    />\n                  </Button>\n                </Box>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={12} lg={6}>\n                    <Controller\n                      name=\"theater_name\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"theater_name\"\n                          label=\"Theater Name\"\n                          autoComplete=\"theater\"\n                          autoFocus\n                          error={!!errors.theater_name}\n                          helperText={getErrorMessage(errors.theater_name)}\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"description\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"description\"\n                          label=\"Description\"\n                          autoComplete=\"description\"\n                          autoFocus\n                          error={!!errors.description}\n                          helperText={getErrorMessage(errors.description)}\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"phno\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"phno\"\n                          label=\"Phone Number\"\n                          autoComplete=\"phno\"\n                          autoFocus\n                          error={!!errors.phno}\n                          helperText={getErrorMessage(errors.phno)}\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"email\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"email\"\n                          label=\"Email Address\"\n                          autoComplete=\"email\"\n                          autoFocus\n                          type=\"email\"\n                          error={!!errors.email}\n                          helperText={getErrorMessage(errors.email)}\n                        />\n                      )}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={12} lg={6}>\n                    <Controller\n                      name=\"address\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"address\"\n                          label=\"Address\"\n                          autoComplete=\"address\"\n                          autoFocus\n                          error={!!errors.address}\n                          helperText={getErrorMessage(errors.address)}\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"city\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"city\"\n                          label=\"City\"\n                          autoComplete=\"city\"\n                          autoFocus\n                          error={!!errors.city}\n                          helperText={getErrorMessage(errors.city)}\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"zipcode\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"zipcode\"\n                          label=\"Zip Code\"\n                          name=\"zipcode\"\n                          autoComplete=\"zipcode\"\n                          autoFocus\n                          error={!!errors.zipcode}\n                          helperText={getErrorMessage(errors.zipcode)}\n                        />\n                      )}\n                    />\n                    <Controller\n                      name=\"state\"\n                      control={control}\n                      defaultValue=\"\"\n                      render={({ field }) => (\n                        <TextField\n                          {...field}\n                          margin=\"normal\"\n                          fullWidth\n                          id=\"state\"\n                          label=\"State\"\n                          name=\"state\"\n                          autoComplete=\"state\"\n                          autoFocus\n                          error={!!errors.state}\n                          helperText={getErrorMessage(errors.state)}\n                        />\n                      )}\n                    />\n                  </Grid>\n                </Grid>\n                <Controller\n                  name=\"location_url\"\n                  control={control}\n                  defaultValue=\"\"\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      margin=\"normal\"\n                      fullWidth\n                      id=\"location_url\"\n                      label=\"Location Url\"\n                      autoComplete=\"location_url\"\n                      autoFocus\n                      error={!!errors.location_url}\n                      helperText={getErrorMessage(errors.location_url)}\n                    />\n                  )}\n                />\n\n                <Button\n                  variant=\"contained\"\n                  endIcon={<SendIcon />}\n                  style={{ width: \"300px\", left: \"125px\" }}\n                  type=\"submit\"\n                >\n                  {enableEdit ? \"Update Theate\" : \"Add Theater\"}\n                </Button>\n              </form>\n            </Stack>\n          </Box>\n        </Fade>\n      </Modal>\n    </React.Fragment>\n  );\n}\n","/Users/sravankumargorati/teamproject-infinite-loop/client/src/app/utils/globalConstantUtil.js",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/Helpers/redisHelper.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/auth-api.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/backend-api.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/helpers.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/protect-page.tsx",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/token.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/types.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/useSession.tsx",[],["426"],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/lib/validations/user.schema.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/middleware.ts",[],[],"/Users/sravankumargorati/teamproject-infinite-loop/client/src/store/index.ts",[],[],{"ruleId":"427","severity":1,"message":"428","line":168,"column":7,"nodeType":"429","endLine":172,"endColumn":9},{"ruleId":"430","severity":1,"message":"431","line":25,"column":8,"nodeType":"432","endLine":25,"endColumn":10,"suggestions":"433"},{"ruleId":"427","severity":1,"message":"428","line":28,"column":7,"nodeType":"429","endLine":28,"endColumn":66},{"ruleId":"434","severity":1,"message":"435","line":28,"column":7,"nodeType":"429","endLine":28,"endColumn":66},{"ruleId":"427","severity":1,"message":"428","line":65,"column":25,"nodeType":"429","endLine":65,"endColumn":164},{"ruleId":"434","severity":1,"message":"435","line":65,"column":25,"nodeType":"429","endLine":65,"endColumn":164},{"ruleId":"427","severity":1,"message":"428","line":218,"column":13,"nodeType":"429","endLine":222,"endColumn":15},{"ruleId":"427","severity":1,"message":"428","line":152,"column":11,"nodeType":"429","endLine":161,"endColumn":13},{"ruleId":"430","severity":1,"message":"436","line":109,"column":8,"nodeType":"432","endLine":109,"endColumn":18,"suggestions":"437"},{"ruleId":"430","severity":1,"message":"438","line":36,"column":8,"nodeType":"432","endLine":36,"endColumn":10,"suggestions":"439"},{"ruleId":"427","severity":1,"message":"428","line":14,"column":7,"nodeType":"429","endLine":14,"endColumn":97},{"ruleId":"430","severity":1,"message":"440","line":119,"column":6,"nodeType":"432","endLine":119,"endColumn":8,"suggestions":"441"},{"ruleId":"427","severity":1,"message":"428","line":232,"column":7,"nodeType":"429","endLine":236,"endColumn":9},{"ruleId":"430","severity":1,"message":"442","line":117,"column":6,"nodeType":"432","endLine":117,"endColumn":39,"suggestions":"443"},{"ruleId":"430","severity":1,"message":"444","line":167,"column":6,"nodeType":"432","endLine":167,"endColumn":8,"suggestions":"445"},{"ruleId":"427","severity":1,"message":"428","line":637,"column":15,"nodeType":"429","endLine":641,"endColumn":17},{"ruleId":"430","severity":1,"message":"446","line":117,"column":6,"nodeType":"432","endLine":117,"endColumn":8,"suggestions":"447"},{"ruleId":"427","severity":1,"message":"428","line":523,"column":23,"nodeType":"429","endLine":531,"endColumn":25},{"ruleId":"427","severity":1,"message":"428","line":578,"column":23,"nodeType":"429","endLine":586,"endColumn":25},{"ruleId":"430","severity":1,"message":"446","line":80,"column":6,"nodeType":"432","endLine":80,"endColumn":8,"suggestions":"448"},{"ruleId":"427","severity":1,"message":"428","line":482,"column":21,"nodeType":"429","endLine":491,"endColumn":23},{"ruleId":"427","severity":1,"message":"428","line":503,"column":23,"nodeType":"429","endLine":511,"endColumn":25},{"ruleId":"427","severity":1,"message":"428","line":538,"column":21,"nodeType":"429","endLine":547,"endColumn":23},{"ruleId":"427","severity":1,"message":"428","line":559,"column":23,"nodeType":"429","endLine":567,"endColumn":25},{"ruleId":"430","severity":1,"message":"449","line":207,"column":6,"nodeType":"432","endLine":207,"endColumn":48,"suggestions":"450"},{"ruleId":"430","severity":1,"message":"451","line":171,"column":6,"nodeType":"432","endLine":171,"endColumn":8,"suggestions":"452"},{"ruleId":"430","severity":1,"message":"453","line":78,"column":6,"nodeType":"432","endLine":78,"endColumn":8,"suggestions":"454"},{"ruleId":"427","severity":1,"message":"428","line":153,"column":53,"nodeType":"429","endLine":153,"endColumn":154},{"ruleId":"430","severity":1,"message":"455","line":179,"column":6,"nodeType":"432","endLine":179,"endColumn":8,"suggestions":"456"},{"ruleId":"430","severity":1,"message":"457","line":102,"column":6,"nodeType":"432","endLine":102,"endColumn":8,"suggestions":"458"},{"ruleId":"430","severity":1,"message":"459","line":38,"column":6,"nodeType":"432","endLine":38,"endColumn":12,"suggestions":"460"},{"ruleId":"430","severity":1,"message":"459","line":50,"column":6,"nodeType":"432","endLine":50,"endColumn":12,"suggestions":"461"},{"ruleId":"462","severity":1,"message":"463","line":98,"column":13,"nodeType":"429","endLine":101,"endColumn":15},{"ruleId":"430","severity":1,"message":"464","line":46,"column":48,"nodeType":"432","endLine":46,"endColumn":50,"suggestions":"465"},{"ruleId":"430","severity":1,"message":"466","line":47,"column":46,"nodeType":"432","endLine":47,"endColumn":59,"suggestions":"467"},{"ruleId":"430","severity":1,"message":"468","line":63,"column":8,"nodeType":"432","endLine":63,"endColumn":10,"suggestions":"469"},{"ruleId":"430","severity":1,"message":"470","line":122,"column":6,"nodeType":"432","endLine":122,"endColumn":8,"suggestions":"471"},{"ruleId":"427","severity":1,"message":"428","line":271,"column":23,"nodeType":"429","endLine":280,"endColumn":25},{"ruleId":"427","severity":1,"message":"428","line":362,"column":19,"nodeType":"429","endLine":371,"endColumn":21},{"ruleId":"430","severity":1,"message":"472","line":22,"column":6,"nodeType":"432","endLine":22,"endColumn":8,"suggestions":"473","suppressions":"474"},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clearSelectedSeats' and 'seats'. Either include them or remove the dependency array.","ArrayExpression",["475"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'store.pincode'. Either include it or remove the dependency array.",["476"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["477"],"React Hook React.useEffect has a missing dependency: 'store.user'. Either include it or remove the dependency array.",["478"],"React Hook useEffect has missing dependencies: 'isPatched' and 'setValue'. Either include them or remove the dependency array.",["479"],"React Hook useEffect has missing dependencies: 'clearSelectedSeats', 'movieName', and 'store.user.user_id'. Either include them or remove the dependency array.",["480"],"React Hook useEffect has a missing dependency: 'movieName'. Either include it or remove the dependency array.",["481"],["482"],"React Hook useEffect has a missing dependency: 'selectedGenre'. Either include it or remove the dependency array.",["483"],"React Hook React.useEffect has missing dependencies: 'setValue' and 'store.user.user_id'. Either include them or remove the dependency array.",["484"],"React Hook useEffect has missing dependencies: 'fetchTickets' and 'store.user?.user_id'. Either include them or remove the dependency array.",["485"],"React Hook useEffect has a missing dependency: 'getRewards'. Either include it or remove the dependency array.",["486"],"React Hook React.useEffect has missing dependencies: 'data' and 'setValue'. Either include them or remove the dependency array.",["487"],"React Hook React.useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["488"],["489"],"@next/next/no-before-interactive-script-outside-document","`next/script`'s `beforeInteractive` strategy should not be used outside of `pages/_document.js`. See: https://nextjs.org/docs/messages/no-before-interactive-script-outside-document","React Hook useEffect has a missing dependency: 'clearSelectedSeats'. Either include it or remove the dependency array.",["490"],"React Hook useEffect has a missing dependency: 'handleSeatSubmit'. Either include it or remove the dependency array.",["491"],"React Hook useEffect has missing dependencies: 'clearSelectedSeats' and 'setValue'. Either include them or remove the dependency array.",["492"],"React Hook useEffect has a missing dependency: 'theaterId'. Either include it or remove the dependency array.",["493"],"React Hook useEffect has missing dependencies: 'fetchUser' and 'store.authUser'. Either include them or remove the dependency array.",["494"],["495"],{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"508","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"519","fix":"521"},{"desc":"519","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"kind":"533","justification":"534"},"Update the dependencies array to be: [clearSelectedSeats, seats]",{"range":"535","text":"536"},"Update the dependencies array to be: [location, store.pincode]",{"range":"537","text":"538"},"Update the dependencies array to be: [setValue]",{"range":"539","text":"540"},"Update the dependencies array to be: [store.user]",{"range":"541","text":"542"},"Update the dependencies array to be: [searchParams, theaters, screens, isPatched, setValue]",{"range":"543","text":"544"},"Update the dependencies array to be: [clearSelectedSeats, movieName, store.user.user_id]",{"range":"545","text":"546"},"Update the dependencies array to be: [movieName]",{"range":"547","text":"548"},{"range":"549","text":"548"},"Update the dependencies array to be: [selectedLanguage, selectedFormat, movies, selectedGenre]",{"range":"550","text":"551"},"Update the dependencies array to be: [setValue, store.user.user_id]",{"range":"552","text":"553"},"Update the dependencies array to be: [fetchTickets, store.user?.user_id]",{"range":"554","text":"555"},"Update the dependencies array to be: [getRewards]",{"range":"556","text":"557"},"Update the dependencies array to be: [data, setValue]",{"range":"558","text":"559"},{"range":"560","text":"559"},{"range":"561","text":"559"},"Update the dependencies array to be: [clearSelectedSeats]",{"range":"562","text":"563"},"Update the dependencies array to be: [row, column, handleSeatSubmit]",{"range":"564","text":"565"},"Update the dependencies array to be: [clearSelectedSeats, setValue]",{"range":"566","text":"567"},"Update the dependencies array to be: [theaterId]",{"range":"568","text":"569"},"Update the dependencies array to be: [fetchUser, store.authUser]",{"range":"570","text":"571"},"directive","",[805,807],"[clearSelectedSeats, seats]",[3562,3572],"[location, store.pincode]",[1581,1583],"[setValue]",[3752,3754],"[store.user]",[3902,3935],"[searchParams, theaters, screens, isPatched, setValue]",[5593,5595],"[clearSelectedSeats, movieName, store.user.user_id]",[3953,3955],"[movieName]",[1991,1993],[5130,5172],"[selectedLanguage, selectedFormat, movies, selectedGenre]",[6093,6095],"[setValue, store.user.user_id]",[2526,2528],"[fetchTickets, store.user?.user_id]",[5577,5579],"[getRewards]",[2452,2454],"[data, setValue]",[1539,1545],[2212,2218],[1831,1833],"[clearSelectedSeats]",[1880,1893],"[row, column, handleSeatSubmit]",[2516,2518],"[clearSelectedSeats, setValue]",[3316,3318],"[theaterId]",[497,499],"[fetchUser, store.authUser]"]